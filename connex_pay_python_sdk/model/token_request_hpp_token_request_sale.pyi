# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class TokenRequestHppTokenRequestSale(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "DeviceGuid",
            "Amount",
        }
        
        class properties:
            DeviceGuid = schemas.StrSchema
            Amount = schemas.Int64Schema
            TenderType = schemas.StrSchema
            SequenceNumber = schemas.StrSchema
            OrderNumber = schemas.StrSchema
            SendReceipt = schemas.BoolSchema
            RiskProcessingOnly = schemas.BoolSchema
            StatementDescription = schemas.StrSchema
            CustomerID = schemas.StrSchema
            ActivationDate = schemas.StrSchema
            GroupId = schemas.StrSchema
            __annotations__ = {
                "DeviceGuid": DeviceGuid,
                "Amount": Amount,
                "TenderType": TenderType,
                "SequenceNumber": SequenceNumber,
                "OrderNumber": OrderNumber,
                "SendReceipt": SendReceipt,
                "RiskProcessingOnly": RiskProcessingOnly,
                "StatementDescription": StatementDescription,
                "CustomerID": CustomerID,
                "ActivationDate": ActivationDate,
                "GroupId": GroupId,
            }
    
    DeviceGuid: MetaOapg.properties.DeviceGuid
    Amount: MetaOapg.properties.Amount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> MetaOapg.properties.Amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TenderType"]) -> MetaOapg.properties.TenderType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SequenceNumber"]) -> MetaOapg.properties.SequenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderNumber"]) -> MetaOapg.properties.OrderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SendReceipt"]) -> MetaOapg.properties.SendReceipt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RiskProcessingOnly"]) -> MetaOapg.properties.RiskProcessingOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementDescription"]) -> MetaOapg.properties.StatementDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CustomerID"]) -> MetaOapg.properties.CustomerID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActivationDate"]) -> MetaOapg.properties.ActivationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GroupId"]) -> MetaOapg.properties.GroupId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "Amount", "TenderType", "SequenceNumber", "OrderNumber", "SendReceipt", "RiskProcessingOnly", "StatementDescription", "CustomerID", "ActivationDate", "GroupId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> MetaOapg.properties.Amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TenderType"]) -> typing.Union[MetaOapg.properties.TenderType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SequenceNumber"]) -> typing.Union[MetaOapg.properties.SequenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderNumber"]) -> typing.Union[MetaOapg.properties.OrderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SendReceipt"]) -> typing.Union[MetaOapg.properties.SendReceipt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RiskProcessingOnly"]) -> typing.Union[MetaOapg.properties.RiskProcessingOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementDescription"]) -> typing.Union[MetaOapg.properties.StatementDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CustomerID"]) -> typing.Union[MetaOapg.properties.CustomerID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActivationDate"]) -> typing.Union[MetaOapg.properties.ActivationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GroupId"]) -> typing.Union[MetaOapg.properties.GroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "Amount", "TenderType", "SequenceNumber", "OrderNumber", "SendReceipt", "RiskProcessingOnly", "StatementDescription", "CustomerID", "ActivationDate", "GroupId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        DeviceGuid: typing.Union[MetaOapg.properties.DeviceGuid, str, ],
        Amount: typing.Union[MetaOapg.properties.Amount, decimal.Decimal, int, ],
        TenderType: typing.Union[MetaOapg.properties.TenderType, str, schemas.Unset] = schemas.unset,
        SequenceNumber: typing.Union[MetaOapg.properties.SequenceNumber, str, schemas.Unset] = schemas.unset,
        OrderNumber: typing.Union[MetaOapg.properties.OrderNumber, str, schemas.Unset] = schemas.unset,
        SendReceipt: typing.Union[MetaOapg.properties.SendReceipt, bool, schemas.Unset] = schemas.unset,
        RiskProcessingOnly: typing.Union[MetaOapg.properties.RiskProcessingOnly, bool, schemas.Unset] = schemas.unset,
        StatementDescription: typing.Union[MetaOapg.properties.StatementDescription, str, schemas.Unset] = schemas.unset,
        CustomerID: typing.Union[MetaOapg.properties.CustomerID, str, schemas.Unset] = schemas.unset,
        ActivationDate: typing.Union[MetaOapg.properties.ActivationDate, str, schemas.Unset] = schemas.unset,
        GroupId: typing.Union[MetaOapg.properties.GroupId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenRequestHppTokenRequestSale':
        return super().__new__(
            cls,
            *args,
            DeviceGuid=DeviceGuid,
            Amount=Amount,
            TenderType=TenderType,
            SequenceNumber=SequenceNumber,
            OrderNumber=OrderNumber,
            SendReceipt=SendReceipt,
            RiskProcessingOnly=RiskProcessingOnly,
            StatementDescription=StatementDescription,
            CustomerID=CustomerID,
            ActivationDate=ActivationDate,
            GroupId=GroupId,
            _configuration=_configuration,
            **kwargs,
        )
