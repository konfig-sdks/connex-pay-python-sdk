# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class PaymentsDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "value",
            "payeeGuid",
        }
        
        class properties:
            payeeGuid = schemas.UUIDSchema
            
            
            class value(
                schemas.Float64Schema
            ):
            
            
                class MetaOapg:
                    format = 'double'
                    inclusive_maximum = 50000
            payeeReferenceToken = schemas.StrSchema
            ridReferenceToken = schemas.StrSchema
            paymentGuid = schemas.UUIDSchema
            ridGuid = schemas.UUIDSchema
            
            
            class memo(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
                    min_length = 0
            
            
            class field2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 0
            
            
            class field3(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 0
            
            
            class field4(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 0
            
            
            class field5(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 0
            __annotations__ = {
                "payeeGuid": payeeGuid,
                "value": value,
                "payeeReferenceToken": payeeReferenceToken,
                "ridReferenceToken": ridReferenceToken,
                "paymentGuid": paymentGuid,
                "ridGuid": ridGuid,
                "memo": memo,
                "field2": field2,
                "field3": field3,
                "field4": field4,
                "field5": field5,
            }
    
    value: MetaOapg.properties.value
    payeeGuid: MetaOapg.properties.payeeGuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payeeGuid"]) -> MetaOapg.properties.payeeGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payeeReferenceToken"]) -> MetaOapg.properties.payeeReferenceToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ridReferenceToken"]) -> MetaOapg.properties.ridReferenceToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentGuid"]) -> MetaOapg.properties.paymentGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ridGuid"]) -> MetaOapg.properties.ridGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field2"]) -> MetaOapg.properties.field2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field3"]) -> MetaOapg.properties.field3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field4"]) -> MetaOapg.properties.field4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field5"]) -> MetaOapg.properties.field5: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payeeGuid", "value", "payeeReferenceToken", "ridReferenceToken", "paymentGuid", "ridGuid", "memo", "field2", "field3", "field4", "field5", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payeeGuid"]) -> MetaOapg.properties.payeeGuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payeeReferenceToken"]) -> typing.Union[MetaOapg.properties.payeeReferenceToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ridReferenceToken"]) -> typing.Union[MetaOapg.properties.ridReferenceToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentGuid"]) -> typing.Union[MetaOapg.properties.paymentGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ridGuid"]) -> typing.Union[MetaOapg.properties.ridGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field2"]) -> typing.Union[MetaOapg.properties.field2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field3"]) -> typing.Union[MetaOapg.properties.field3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field4"]) -> typing.Union[MetaOapg.properties.field4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field5"]) -> typing.Union[MetaOapg.properties.field5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payeeGuid", "value", "payeeReferenceToken", "ridReferenceToken", "paymentGuid", "ridGuid", "memo", "field2", "field3", "field4", "field5", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, ],
        payeeGuid: typing.Union[MetaOapg.properties.payeeGuid, str, uuid.UUID, ],
        payeeReferenceToken: typing.Union[MetaOapg.properties.payeeReferenceToken, str, schemas.Unset] = schemas.unset,
        ridReferenceToken: typing.Union[MetaOapg.properties.ridReferenceToken, str, schemas.Unset] = schemas.unset,
        paymentGuid: typing.Union[MetaOapg.properties.paymentGuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        ridGuid: typing.Union[MetaOapg.properties.ridGuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        field2: typing.Union[MetaOapg.properties.field2, str, schemas.Unset] = schemas.unset,
        field3: typing.Union[MetaOapg.properties.field3, str, schemas.Unset] = schemas.unset,
        field4: typing.Union[MetaOapg.properties.field4, str, schemas.Unset] = schemas.unset,
        field5: typing.Union[MetaOapg.properties.field5, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentsDto':
        return super().__new__(
            cls,
            *args,
            value=value,
            payeeGuid=payeeGuid,
            payeeReferenceToken=payeeReferenceToken,
            ridReferenceToken=ridReferenceToken,
            paymentGuid=paymentGuid,
            ridGuid=ridGuid,
            memo=memo,
            field2=field2,
            field3=field3,
            field4=field4,
            field5=field5,
            _configuration=_configuration,
            **kwargs,
        )
