# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class VerificationCardBankAccountResponse(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    guid = schemas.StrSchema
                    status = schemas.StrSchema
                    timeStamp = schemas.StrSchema
                    deviceGuid = schemas.StrSchema
                    
                    
                    class card(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                first6 = schemas.StrSchema
                                first4 = schemas.StrSchema
                                last4 = schemas.StrSchema
                                cardHolderName = schemas.StrSchema
                                cardType = schemas.StrSchema
                                expirationDate = schemas.StrSchema
                                guid = schemas.StrSchema
                                
                                
                                class customer(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            guid = schemas.StrSchema
                                            firstName = schemas.StrSchema
                                            lastName = schemas.StrSchema
                                            dateOfBirth = schemas.StrSchema
                                            address1 = schemas.StrSchema
                                            address2 = schemas.StrSchema
                                            zip = schemas.StrSchema
                                            city = schemas.StrSchema
                                            country = schemas.StrSchema
                                            phone = schemas.StrSchema
                                            email = schemas.StrSchema
                                            ssN4 = schemas.StrSchema
                                            driverLicenseNumber = schemas.StrSchema
                                            __annotations__ = {
                                                "guid": guid,
                                                "firstName": firstName,
                                                "lastName": lastName,
                                                "dateOfBirth": dateOfBirth,
                                                "address1": address1,
                                                "address2": address2,
                                                "zip": zip,
                                                "city": city,
                                                "country": country,
                                                "phone": phone,
                                                "email": email,
                                                "ssN4": ssN4,
                                                "driverLicenseNumber": driverLicenseNumber,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["address1"]) -> MetaOapg.properties.address1: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["address2"]) -> MetaOapg.properties.address2: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["ssN4"]) -> MetaOapg.properties.ssN4: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["driverLicenseNumber"]) -> MetaOapg.properties.driverLicenseNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["guid", "firstName", "lastName", "dateOfBirth", "address1", "address2", "zip", "city", "country", "phone", "email", "ssN4", "driverLicenseNumber", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["address1"]) -> typing.Union[MetaOapg.properties.address1, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["address2"]) -> typing.Union[MetaOapg.properties.address2, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["ssN4"]) -> typing.Union[MetaOapg.properties.ssN4, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["driverLicenseNumber"]) -> typing.Union[MetaOapg.properties.driverLicenseNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["guid", "firstName", "lastName", "dateOfBirth", "address1", "address2", "zip", "city", "country", "phone", "email", "ssN4", "driverLicenseNumber", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                                        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
                                        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
                                        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, str, schemas.Unset] = schemas.unset,
                                        address1: typing.Union[MetaOapg.properties.address1, str, schemas.Unset] = schemas.unset,
                                        address2: typing.Union[MetaOapg.properties.address2, str, schemas.Unset] = schemas.unset,
                                        zip: typing.Union[MetaOapg.properties.zip, str, schemas.Unset] = schemas.unset,
                                        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
                                        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
                                        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
                                        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                                        ssN4: typing.Union[MetaOapg.properties.ssN4, str, schemas.Unset] = schemas.unset,
                                        driverLicenseNumber: typing.Union[MetaOapg.properties.driverLicenseNumber, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'customer':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            guid=guid,
                                            firstName=firstName,
                                            lastName=lastName,
                                            dateOfBirth=dateOfBirth,
                                            address1=address1,
                                            address2=address2,
                                            zip=zip,
                                            city=city,
                                            country=country,
                                            phone=phone,
                                            email=email,
                                            ssN4=ssN4,
                                            driverLicenseNumber=driverLicenseNumber,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "first6": first6,
                                    "first4": first4,
                                    "last4": last4,
                                    "cardHolderName": cardHolderName,
                                    "cardType": cardType,
                                    "expirationDate": expirationDate,
                                    "guid": guid,
                                    "customer": customer,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["first6"]) -> MetaOapg.properties.first6: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["first4"]) -> MetaOapg.properties.first4: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["last4"]) -> MetaOapg.properties.last4: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardType"]) -> MetaOapg.properties.cardType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["customer"]) -> MetaOapg.properties.customer: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["first6", "first4", "last4", "cardHolderName", "cardType", "expirationDate", "guid", "customer", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["first6"]) -> typing.Union[MetaOapg.properties.first6, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["first4"]) -> typing.Union[MetaOapg.properties.first4, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["last4"]) -> typing.Union[MetaOapg.properties.last4, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardHolderName"]) -> typing.Union[MetaOapg.properties.cardHolderName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardType"]) -> typing.Union[MetaOapg.properties.cardType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union[MetaOapg.properties.customer, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first6", "first4", "last4", "cardHolderName", "cardType", "expirationDate", "guid", "customer", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            first6: typing.Union[MetaOapg.properties.first6, str, schemas.Unset] = schemas.unset,
                            first4: typing.Union[MetaOapg.properties.first4, str, schemas.Unset] = schemas.unset,
                            last4: typing.Union[MetaOapg.properties.last4, str, schemas.Unset] = schemas.unset,
                            cardHolderName: typing.Union[MetaOapg.properties.cardHolderName, str, schemas.Unset] = schemas.unset,
                            cardType: typing.Union[MetaOapg.properties.cardType, str, schemas.Unset] = schemas.unset,
                            expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, schemas.Unset] = schemas.unset,
                            guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                            customer: typing.Union[MetaOapg.properties.customer, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'card':
                            return super().__new__(
                                cls,
                                *args,
                                first6=first6,
                                first4=first4,
                                last4=last4,
                                cardHolderName=cardHolderName,
                                cardType=cardType,
                                expirationDate=expirationDate,
                                guid=guid,
                                customer=customer,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    addressVerificationCode = schemas.StrSchema
                    cvvVerificationCode = schemas.StrSchema
                    processorStatusCode = schemas.StrSchema
                    wasProcessed = schemas.BoolSchema
                    __annotations__ = {
                        "guid": guid,
                        "status": status,
                        "timeStamp": timeStamp,
                        "deviceGuid": deviceGuid,
                        "card": card,
                        "addressVerificationCode": addressVerificationCode,
                        "cvvVerificationCode": cvvVerificationCode,
                        "processorStatusCode": processorStatusCode,
                        "wasProcessed": wasProcessed,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deviceGuid"]) -> MetaOapg.properties.deviceGuid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["card"]) -> MetaOapg.properties.card: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressVerificationCode"]) -> MetaOapg.properties.addressVerificationCode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cvvVerificationCode"]) -> MetaOapg.properties.cvvVerificationCode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["processorStatusCode"]) -> MetaOapg.properties.processorStatusCode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["wasProcessed"]) -> MetaOapg.properties.wasProcessed: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["guid", "status", "timeStamp", "deviceGuid", "card", "addressVerificationCode", "cvvVerificationCode", "processorStatusCode", "wasProcessed", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deviceGuid"]) -> typing.Union[MetaOapg.properties.deviceGuid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union[MetaOapg.properties.card, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressVerificationCode"]) -> typing.Union[MetaOapg.properties.addressVerificationCode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cvvVerificationCode"]) -> typing.Union[MetaOapg.properties.cvvVerificationCode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["processorStatusCode"]) -> typing.Union[MetaOapg.properties.processorStatusCode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["wasProcessed"]) -> typing.Union[MetaOapg.properties.wasProcessed, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["guid", "status", "timeStamp", "deviceGuid", "card", "addressVerificationCode", "cvvVerificationCode", "processorStatusCode", "wasProcessed", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
                deviceGuid: typing.Union[MetaOapg.properties.deviceGuid, str, schemas.Unset] = schemas.unset,
                card: typing.Union[MetaOapg.properties.card, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                addressVerificationCode: typing.Union[MetaOapg.properties.addressVerificationCode, str, schemas.Unset] = schemas.unset,
                cvvVerificationCode: typing.Union[MetaOapg.properties.cvvVerificationCode, str, schemas.Unset] = schemas.unset,
                processorStatusCode: typing.Union[MetaOapg.properties.processorStatusCode, str, schemas.Unset] = schemas.unset,
                wasProcessed: typing.Union[MetaOapg.properties.wasProcessed, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *args,
                    guid=guid,
                    status=status,
                    timeStamp=timeStamp,
                    deviceGuid=deviceGuid,
                    card=card,
                    addressVerificationCode=addressVerificationCode,
                    cvvVerificationCode=cvvVerificationCode,
                    processorStatusCode=processorStatusCode,
                    wasProcessed=wasProcessed,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class one_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    guid = schemas.StrSchema
                    status = schemas.StrSchema
                    timeStamp = schemas.StrSchema
                    deviceGuid = schemas.StrSchema
                    
                    
                    class bankAccount(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                guid = schemas.StrSchema
                                accountType = schemas.StrSchema
                                accountNumberLastFour = schemas.StrSchema
                                nameOnAccount = schemas.StrSchema
                                
                                
                                class customer(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            guid = schemas.StrSchema
                                            firstName = schemas.StrSchema
                                            lastName = schemas.StrSchema
                                            __annotations__ = {
                                                "guid": guid,
                                                "firstName": firstName,
                                                "lastName": lastName,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["guid", "firstName", "lastName", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["guid", "firstName", "lastName", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                                        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
                                        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'customer':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            guid=guid,
                                            firstName=firstName,
                                            lastName=lastName,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                accountAndRoutingNumberToken = schemas.StrSchema
                                __annotations__ = {
                                    "guid": guid,
                                    "accountType": accountType,
                                    "accountNumberLastFour": accountNumberLastFour,
                                    "nameOnAccount": nameOnAccount,
                                    "customer": customer,
                                    "accountAndRoutingNumberToken": accountAndRoutingNumberToken,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["accountType"]) -> MetaOapg.properties.accountType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["accountNumberLastFour"]) -> MetaOapg.properties.accountNumberLastFour: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nameOnAccount"]) -> MetaOapg.properties.nameOnAccount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["customer"]) -> MetaOapg.properties.customer: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["accountAndRoutingNumberToken"]) -> MetaOapg.properties.accountAndRoutingNumberToken: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["guid", "accountType", "accountNumberLastFour", "nameOnAccount", "customer", "accountAndRoutingNumberToken", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["accountType"]) -> typing.Union[MetaOapg.properties.accountType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["accountNumberLastFour"]) -> typing.Union[MetaOapg.properties.accountNumberLastFour, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nameOnAccount"]) -> typing.Union[MetaOapg.properties.nameOnAccount, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union[MetaOapg.properties.customer, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["accountAndRoutingNumberToken"]) -> typing.Union[MetaOapg.properties.accountAndRoutingNumberToken, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["guid", "accountType", "accountNumberLastFour", "nameOnAccount", "customer", "accountAndRoutingNumberToken", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                            accountType: typing.Union[MetaOapg.properties.accountType, str, schemas.Unset] = schemas.unset,
                            accountNumberLastFour: typing.Union[MetaOapg.properties.accountNumberLastFour, str, schemas.Unset] = schemas.unset,
                            nameOnAccount: typing.Union[MetaOapg.properties.nameOnAccount, str, schemas.Unset] = schemas.unset,
                            customer: typing.Union[MetaOapg.properties.customer, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            accountAndRoutingNumberToken: typing.Union[MetaOapg.properties.accountAndRoutingNumberToken, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'bankAccount':
                            return super().__new__(
                                cls,
                                *args,
                                guid=guid,
                                accountType=accountType,
                                accountNumberLastFour=accountNumberLastFour,
                                nameOnAccount=nameOnAccount,
                                customer=customer,
                                accountAndRoutingNumberToken=accountAndRoutingNumberToken,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    processorStatusCode = schemas.StrSchema
                    wasProcessed = schemas.BoolSchema
                    __annotations__ = {
                        "guid": guid,
                        "status": status,
                        "timeStamp": timeStamp,
                        "deviceGuid": deviceGuid,
                        "bankAccount": bankAccount,
                        "processorStatusCode": processorStatusCode,
                        "wasProcessed": wasProcessed,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deviceGuid"]) -> MetaOapg.properties.deviceGuid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["bankAccount"]) -> MetaOapg.properties.bankAccount: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["processorStatusCode"]) -> MetaOapg.properties.processorStatusCode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["wasProcessed"]) -> MetaOapg.properties.wasProcessed: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["guid", "status", "timeStamp", "deviceGuid", "bankAccount", "processorStatusCode", "wasProcessed", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deviceGuid"]) -> typing.Union[MetaOapg.properties.deviceGuid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["bankAccount"]) -> typing.Union[MetaOapg.properties.bankAccount, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["processorStatusCode"]) -> typing.Union[MetaOapg.properties.processorStatusCode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["wasProcessed"]) -> typing.Union[MetaOapg.properties.wasProcessed, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["guid", "status", "timeStamp", "deviceGuid", "bankAccount", "processorStatusCode", "wasProcessed", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
                deviceGuid: typing.Union[MetaOapg.properties.deviceGuid, str, schemas.Unset] = schemas.unset,
                bankAccount: typing.Union[MetaOapg.properties.bankAccount, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                processorStatusCode: typing.Union[MetaOapg.properties.processorStatusCode, str, schemas.Unset] = schemas.unset,
                wasProcessed: typing.Union[MetaOapg.properties.wasProcessed, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    *args,
                    guid=guid,
                    status=status,
                    timeStamp=timeStamp,
                    deviceGuid=deviceGuid,
                    bankAccount=bankAccount,
                    processorStatusCode=processorStatusCode,
                    wasProcessed=wasProcessed,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VerificationCardBankAccountResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
