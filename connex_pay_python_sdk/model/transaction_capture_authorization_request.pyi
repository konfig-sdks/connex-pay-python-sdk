# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class TransactionCaptureAuthorizationRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "DeviceGuid",
            "AuthOnlyGuid",
        }
        
        class properties:
            DeviceGuid = schemas.StrSchema
            AuthOnlyGuid = schemas.StrSchema
            SequenceNumber = schemas.StrSchema
        
            @staticmethod
            def ConnexPayTransaction() -> typing.Type['TransactionCaptureAuthorizationRequestConnexPayTransaction']:
                return TransactionCaptureAuthorizationRequestConnexPayTransaction
            OrderNumber = schemas.StrSchema
            CustomerID = schemas.StrSchema
            AssociationID = schemas.StrSchema
        
            @staticmethod
            def CustomParameters() -> typing.Type['TransactionCaptureAuthorizationRequestCustomParameters']:
                return TransactionCaptureAuthorizationRequestCustomParameters
            __annotations__ = {
                "DeviceGuid": DeviceGuid,
                "AuthOnlyGuid": AuthOnlyGuid,
                "SequenceNumber": SequenceNumber,
                "ConnexPayTransaction": ConnexPayTransaction,
                "OrderNumber": OrderNumber,
                "CustomerID": CustomerID,
                "AssociationID": AssociationID,
                "CustomParameters": CustomParameters,
            }
    
    DeviceGuid: MetaOapg.properties.DeviceGuid
    AuthOnlyGuid: MetaOapg.properties.AuthOnlyGuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AuthOnlyGuid"]) -> MetaOapg.properties.AuthOnlyGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SequenceNumber"]) -> MetaOapg.properties.SequenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConnexPayTransaction"]) -> 'TransactionCaptureAuthorizationRequestConnexPayTransaction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderNumber"]) -> MetaOapg.properties.OrderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CustomerID"]) -> MetaOapg.properties.CustomerID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssociationID"]) -> MetaOapg.properties.AssociationID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CustomParameters"]) -> 'TransactionCaptureAuthorizationRequestCustomParameters': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "AuthOnlyGuid", "SequenceNumber", "ConnexPayTransaction", "OrderNumber", "CustomerID", "AssociationID", "CustomParameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AuthOnlyGuid"]) -> MetaOapg.properties.AuthOnlyGuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SequenceNumber"]) -> typing.Union[MetaOapg.properties.SequenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConnexPayTransaction"]) -> typing.Union['TransactionCaptureAuthorizationRequestConnexPayTransaction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderNumber"]) -> typing.Union[MetaOapg.properties.OrderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CustomerID"]) -> typing.Union[MetaOapg.properties.CustomerID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssociationID"]) -> typing.Union[MetaOapg.properties.AssociationID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CustomParameters"]) -> typing.Union['TransactionCaptureAuthorizationRequestCustomParameters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "AuthOnlyGuid", "SequenceNumber", "ConnexPayTransaction", "OrderNumber", "CustomerID", "AssociationID", "CustomParameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        DeviceGuid: typing.Union[MetaOapg.properties.DeviceGuid, str, ],
        AuthOnlyGuid: typing.Union[MetaOapg.properties.AuthOnlyGuid, str, ],
        SequenceNumber: typing.Union[MetaOapg.properties.SequenceNumber, str, schemas.Unset] = schemas.unset,
        ConnexPayTransaction: typing.Union['TransactionCaptureAuthorizationRequestConnexPayTransaction', schemas.Unset] = schemas.unset,
        OrderNumber: typing.Union[MetaOapg.properties.OrderNumber, str, schemas.Unset] = schemas.unset,
        CustomerID: typing.Union[MetaOapg.properties.CustomerID, str, schemas.Unset] = schemas.unset,
        AssociationID: typing.Union[MetaOapg.properties.AssociationID, str, schemas.Unset] = schemas.unset,
        CustomParameters: typing.Union['TransactionCaptureAuthorizationRequestCustomParameters', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionCaptureAuthorizationRequest':
        return super().__new__(
            cls,
            *args,
            DeviceGuid=DeviceGuid,
            AuthOnlyGuid=AuthOnlyGuid,
            SequenceNumber=SequenceNumber,
            ConnexPayTransaction=ConnexPayTransaction,
            OrderNumber=OrderNumber,
            CustomerID=CustomerID,
            AssociationID=AssociationID,
            CustomParameters=CustomParameters,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.transaction_capture_authorization_request_connex_pay_transaction import TransactionCaptureAuthorizationRequestConnexPayTransaction
from connex_pay_python_sdk.model.transaction_capture_authorization_request_custom_parameters import TransactionCaptureAuthorizationRequestCustomParameters
