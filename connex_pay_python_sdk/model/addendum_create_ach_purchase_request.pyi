# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class AddendumCreateAchPurchaseRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            ItemGuid = schemas.StrSchema
            Value = schemas.StrSchema
            Category = schemas.StrSchema
            IdExternal = schemas.StrSchema
            Note = schemas.StrSchema
            Sequence = schemas.StrSchema
            __annotations__ = {
                "ItemGuid": ItemGuid,
                "Value": Value,
                "Category": Category,
                "IdExternal": IdExternal,
                "Note": Note,
                "Sequence": Sequence,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ItemGuid"]) -> MetaOapg.properties.ItemGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Value"]) -> MetaOapg.properties.Value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Category"]) -> MetaOapg.properties.Category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IdExternal"]) -> MetaOapg.properties.IdExternal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Note"]) -> MetaOapg.properties.Note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sequence"]) -> MetaOapg.properties.Sequence: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ItemGuid", "Value", "Category", "IdExternal", "Note", "Sequence", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ItemGuid"]) -> typing.Union[MetaOapg.properties.ItemGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Value"]) -> typing.Union[MetaOapg.properties.Value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Category"]) -> typing.Union[MetaOapg.properties.Category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IdExternal"]) -> typing.Union[MetaOapg.properties.IdExternal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Note"]) -> typing.Union[MetaOapg.properties.Note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sequence"]) -> typing.Union[MetaOapg.properties.Sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ItemGuid", "Value", "Category", "IdExternal", "Note", "Sequence", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ItemGuid: typing.Union[MetaOapg.properties.ItemGuid, str, schemas.Unset] = schemas.unset,
        Value: typing.Union[MetaOapg.properties.Value, str, schemas.Unset] = schemas.unset,
        Category: typing.Union[MetaOapg.properties.Category, str, schemas.Unset] = schemas.unset,
        IdExternal: typing.Union[MetaOapg.properties.IdExternal, str, schemas.Unset] = schemas.unset,
        Note: typing.Union[MetaOapg.properties.Note, str, schemas.Unset] = schemas.unset,
        Sequence: typing.Union[MetaOapg.properties.Sequence, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddendumCreateAchPurchaseRequest':
        return super().__new__(
            cls,
            *args,
            ItemGuid=ItemGuid,
            Value=Value,
            Category=Category,
            IdExternal=IdExternal,
            Note=Note,
            Sequence=Sequence,
            _configuration=_configuration,
            **kwargs,
        )
