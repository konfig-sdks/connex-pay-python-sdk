# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class TokenGenerateReportingTokenRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "UserName",
            "Password",
        }
        
        class properties:
            UserName = schemas.StrSchema
            Password = schemas.StrSchema
            __annotations__ = {
                "UserName": UserName,
                "Password": Password,
            }
    
    UserName: MetaOapg.properties.UserName
    Password: MetaOapg.properties.Password
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UserName"]) -> MetaOapg.properties.UserName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Password"]) -> MetaOapg.properties.Password: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["UserName", "Password", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UserName"]) -> MetaOapg.properties.UserName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Password"]) -> MetaOapg.properties.Password: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["UserName", "Password", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        UserName: typing.Union[MetaOapg.properties.UserName, str, ],
        Password: typing.Union[MetaOapg.properties.Password, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenGenerateReportingTokenRequest':
        return super().__new__(
            cls,
            *args,
            UserName=UserName,
            Password=Password,
            _configuration=_configuration,
            **kwargs,
        )
