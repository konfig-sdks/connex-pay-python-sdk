# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class CardIssueCreateVirtualCardLiteRequestTransmission(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    URL Links (email) or a text document (fax) to virtual cards can be emailed/faxed by including the VCC Transmission object in the IssueLite API call. Including the transmission object for email also allows you to pull back a URL you can use within your application to direct a user to a visual representation of the virtual card.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def TransmissionMethods() -> typing.Type['CardIssueCreateVirtualCardLiteRequestTransmissionTransmissionMethods']:
                return CardIssueCreateVirtualCardLiteRequestTransmissionTransmissionMethods
            EmailRecipient = schemas.StrSchema
            MerchantPhoneNumber = schemas.StrSchema
            EmailFrom = schemas.StrSchema
            RecipientName = schemas.StrSchema
            Subject = schemas.StrSchema
            Message = schemas.StrSchema
            DaysToExpire = schemas.StrSchema
            FaxFrom = schemas.StrSchema
            FaxRecipient = schemas.StrSchema
            __annotations__ = {
                "TransmissionMethods": TransmissionMethods,
                "EmailRecipient": EmailRecipient,
                "MerchantPhoneNumber": MerchantPhoneNumber,
                "EmailFrom": EmailFrom,
                "RecipientName": RecipientName,
                "Subject": Subject,
                "Message": Message,
                "DaysToExpire": DaysToExpire,
                "FaxFrom": FaxFrom,
                "FaxRecipient": FaxRecipient,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransmissionMethods"]) -> 'CardIssueCreateVirtualCardLiteRequestTransmissionTransmissionMethods': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmailRecipient"]) -> MetaOapg.properties.EmailRecipient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MerchantPhoneNumber"]) -> MetaOapg.properties.MerchantPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmailFrom"]) -> MetaOapg.properties.EmailFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RecipientName"]) -> MetaOapg.properties.RecipientName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Subject"]) -> MetaOapg.properties.Subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Message"]) -> MetaOapg.properties.Message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DaysToExpire"]) -> MetaOapg.properties.DaysToExpire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FaxFrom"]) -> MetaOapg.properties.FaxFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FaxRecipient"]) -> MetaOapg.properties.FaxRecipient: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["TransmissionMethods", "EmailRecipient", "MerchantPhoneNumber", "EmailFrom", "RecipientName", "Subject", "Message", "DaysToExpire", "FaxFrom", "FaxRecipient", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransmissionMethods"]) -> typing.Union['CardIssueCreateVirtualCardLiteRequestTransmissionTransmissionMethods', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmailRecipient"]) -> typing.Union[MetaOapg.properties.EmailRecipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MerchantPhoneNumber"]) -> typing.Union[MetaOapg.properties.MerchantPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmailFrom"]) -> typing.Union[MetaOapg.properties.EmailFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RecipientName"]) -> typing.Union[MetaOapg.properties.RecipientName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Subject"]) -> typing.Union[MetaOapg.properties.Subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Message"]) -> typing.Union[MetaOapg.properties.Message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DaysToExpire"]) -> typing.Union[MetaOapg.properties.DaysToExpire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FaxFrom"]) -> typing.Union[MetaOapg.properties.FaxFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FaxRecipient"]) -> typing.Union[MetaOapg.properties.FaxRecipient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TransmissionMethods", "EmailRecipient", "MerchantPhoneNumber", "EmailFrom", "RecipientName", "Subject", "Message", "DaysToExpire", "FaxFrom", "FaxRecipient", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        TransmissionMethods: typing.Union['CardIssueCreateVirtualCardLiteRequestTransmissionTransmissionMethods', schemas.Unset] = schemas.unset,
        EmailRecipient: typing.Union[MetaOapg.properties.EmailRecipient, str, schemas.Unset] = schemas.unset,
        MerchantPhoneNumber: typing.Union[MetaOapg.properties.MerchantPhoneNumber, str, schemas.Unset] = schemas.unset,
        EmailFrom: typing.Union[MetaOapg.properties.EmailFrom, str, schemas.Unset] = schemas.unset,
        RecipientName: typing.Union[MetaOapg.properties.RecipientName, str, schemas.Unset] = schemas.unset,
        Subject: typing.Union[MetaOapg.properties.Subject, str, schemas.Unset] = schemas.unset,
        Message: typing.Union[MetaOapg.properties.Message, str, schemas.Unset] = schemas.unset,
        DaysToExpire: typing.Union[MetaOapg.properties.DaysToExpire, str, schemas.Unset] = schemas.unset,
        FaxFrom: typing.Union[MetaOapg.properties.FaxFrom, str, schemas.Unset] = schemas.unset,
        FaxRecipient: typing.Union[MetaOapg.properties.FaxRecipient, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardIssueCreateVirtualCardLiteRequestTransmission':
        return super().__new__(
            cls,
            *args,
            TransmissionMethods=TransmissionMethods,
            EmailRecipient=EmailRecipient,
            MerchantPhoneNumber=MerchantPhoneNumber,
            EmailFrom=EmailFrom,
            RecipientName=RecipientName,
            Subject=Subject,
            Message=Message,
            DaysToExpire=DaysToExpire,
            FaxFrom=FaxFrom,
            FaxRecipient=FaxRecipient,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.card_issue_create_virtual_card_lite_request_transmission_transmission_methods import CardIssueCreateVirtualCardLiteRequestTransmissionTransmissionMethods
