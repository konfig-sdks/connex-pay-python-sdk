# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SettingTokenizeBankAccountInfoRequestAccountHolder(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Payee's Account information
    """


    class MetaOapg:
        
        class properties:
            FirstName = schemas.StrSchema
            LastName = schemas.StrSchema
            MiddleName = schemas.StrSchema
            BusinessName = schemas.StrSchema
            Email = schemas.StrSchema
            Phone = schemas.StrSchema
        
            @staticmethod
            def Address() -> typing.Type['SettingTokenizeBankAccountInfoRequestAccountHolderAddress']:
                return SettingTokenizeBankAccountInfoRequestAccountHolderAddress
        
            @staticmethod
            def BankAccount() -> typing.Type['SettingTokenizeBankAccountInfoRequestAccountHolderBankAccount']:
                return SettingTokenizeBankAccountInfoRequestAccountHolderBankAccount
            __annotations__ = {
                "FirstName": FirstName,
                "LastName": LastName,
                "MiddleName": MiddleName,
                "BusinessName": BusinessName,
                "Email": Email,
                "Phone": Phone,
                "Address": Address,
                "BankAccount": BankAccount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FirstName"]) -> MetaOapg.properties.FirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastName"]) -> MetaOapg.properties.LastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MiddleName"]) -> MetaOapg.properties.MiddleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BusinessName"]) -> MetaOapg.properties.BusinessName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Phone"]) -> MetaOapg.properties.Phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Address"]) -> 'SettingTokenizeBankAccountInfoRequestAccountHolderAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BankAccount"]) -> 'SettingTokenizeBankAccountInfoRequestAccountHolderBankAccount': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FirstName", "LastName", "MiddleName", "BusinessName", "Email", "Phone", "Address", "BankAccount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FirstName"]) -> typing.Union[MetaOapg.properties.FirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastName"]) -> typing.Union[MetaOapg.properties.LastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MiddleName"]) -> typing.Union[MetaOapg.properties.MiddleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BusinessName"]) -> typing.Union[MetaOapg.properties.BusinessName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Phone"]) -> typing.Union[MetaOapg.properties.Phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Address"]) -> typing.Union['SettingTokenizeBankAccountInfoRequestAccountHolderAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BankAccount"]) -> typing.Union['SettingTokenizeBankAccountInfoRequestAccountHolderBankAccount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FirstName", "LastName", "MiddleName", "BusinessName", "Email", "Phone", "Address", "BankAccount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FirstName: typing.Union[MetaOapg.properties.FirstName, str, schemas.Unset] = schemas.unset,
        LastName: typing.Union[MetaOapg.properties.LastName, str, schemas.Unset] = schemas.unset,
        MiddleName: typing.Union[MetaOapg.properties.MiddleName, str, schemas.Unset] = schemas.unset,
        BusinessName: typing.Union[MetaOapg.properties.BusinessName, str, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        Phone: typing.Union[MetaOapg.properties.Phone, str, schemas.Unset] = schemas.unset,
        Address: typing.Union['SettingTokenizeBankAccountInfoRequestAccountHolderAddress', schemas.Unset] = schemas.unset,
        BankAccount: typing.Union['SettingTokenizeBankAccountInfoRequestAccountHolderBankAccount', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SettingTokenizeBankAccountInfoRequestAccountHolder':
        return super().__new__(
            cls,
            *args,
            FirstName=FirstName,
            LastName=LastName,
            MiddleName=MiddleName,
            BusinessName=BusinessName,
            Email=Email,
            Phone=Phone,
            Address=Address,
            BankAccount=BankAccount,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.setting_tokenize_bank_account_info_request_account_holder_address import SettingTokenizeBankAccountInfoRequestAccountHolderAddress
from connex_pay_python_sdk.model.setting_tokenize_bank_account_info_request_account_holder_bank_account import SettingTokenizeBankAccountInfoRequestAccountHolderBankAccount
