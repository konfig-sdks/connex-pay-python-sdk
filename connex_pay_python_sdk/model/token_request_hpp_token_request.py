# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class TokenRequestHppTokenRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "Sale",
            "MerchantName",
        }
        
        class properties:
            MerchantName = schemas.StrSchema
        
            @staticmethod
            def Sale() -> typing.Type['TokenRequestHppTokenRequestSale']:
                return TokenRequestHppTokenRequestSale
            Description = schemas.StrSchema
            ResultRedirectUrl = schemas.StrSchema
            LogoUrl = schemas.StrSchema
        
            @staticmethod
            def TenderTypeOptions() -> typing.Type['TokenRequestHppTokenRequestTenderTypeOptions']:
                return TokenRequestHppTokenRequestTenderTypeOptions
            Expiration = schemas.DateTimeSchema
            __annotations__ = {
                "MerchantName": MerchantName,
                "Sale": Sale,
                "Description": Description,
                "ResultRedirectUrl": ResultRedirectUrl,
                "LogoUrl": LogoUrl,
                "TenderTypeOptions": TenderTypeOptions,
                "Expiration": Expiration,
            }
    
    Sale: 'TokenRequestHppTokenRequestSale'
    MerchantName: MetaOapg.properties.MerchantName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MerchantName"]) -> MetaOapg.properties.MerchantName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sale"]) -> 'TokenRequestHppTokenRequestSale': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResultRedirectUrl"]) -> MetaOapg.properties.ResultRedirectUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LogoUrl"]) -> MetaOapg.properties.LogoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TenderTypeOptions"]) -> 'TokenRequestHppTokenRequestTenderTypeOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Expiration"]) -> MetaOapg.properties.Expiration: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["MerchantName", "Sale", "Description", "ResultRedirectUrl", "LogoUrl", "TenderTypeOptions", "Expiration", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MerchantName"]) -> MetaOapg.properties.MerchantName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sale"]) -> 'TokenRequestHppTokenRequestSale': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResultRedirectUrl"]) -> typing.Union[MetaOapg.properties.ResultRedirectUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LogoUrl"]) -> typing.Union[MetaOapg.properties.LogoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TenderTypeOptions"]) -> typing.Union['TokenRequestHppTokenRequestTenderTypeOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Expiration"]) -> typing.Union[MetaOapg.properties.Expiration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MerchantName", "Sale", "Description", "ResultRedirectUrl", "LogoUrl", "TenderTypeOptions", "Expiration", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Sale: 'TokenRequestHppTokenRequestSale',
        MerchantName: typing.Union[MetaOapg.properties.MerchantName, str, ],
        Description: typing.Union[MetaOapg.properties.Description, str, schemas.Unset] = schemas.unset,
        ResultRedirectUrl: typing.Union[MetaOapg.properties.ResultRedirectUrl, str, schemas.Unset] = schemas.unset,
        LogoUrl: typing.Union[MetaOapg.properties.LogoUrl, str, schemas.Unset] = schemas.unset,
        TenderTypeOptions: typing.Union['TokenRequestHppTokenRequestTenderTypeOptions', schemas.Unset] = schemas.unset,
        Expiration: typing.Union[MetaOapg.properties.Expiration, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenRequestHppTokenRequest':
        return super().__new__(
            cls,
            *args,
            Sale=Sale,
            MerchantName=MerchantName,
            Description=Description,
            ResultRedirectUrl=ResultRedirectUrl,
            LogoUrl=LogoUrl,
            TenderTypeOptions=TenderTypeOptions,
            Expiration=Expiration,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.token_request_hpp_token_request_sale import TokenRequestHppTokenRequestSale
from connex_pay_python_sdk.model.token_request_hpp_token_request_tender_type_options import TokenRequestHppTokenRequestTenderTypeOptions
