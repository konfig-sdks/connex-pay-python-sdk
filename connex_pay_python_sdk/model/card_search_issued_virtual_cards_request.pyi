# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class CardSearchIssuedVirtualCardsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "MerchantGuid",
        }
        
        class properties:
            MerchantGuid = schemas.StrSchema
            SaleGuid = schemas.StrSchema
            IncomingTransactionCode = schemas.StrSchema
            OrderNumber = schemas.StrSchema
            CustomerID = schemas.StrSchema
            TimeStampFrom = schemas.DateSchema
            TimeStampTo = schemas.DateSchema
            IssuedAmountFrom = schemas.Float32Schema
            IssuedAmountTo = schemas.Float32Schema
            OutgoingTransactionCode = schemas.StrSchema
            SettledAmountFrom = schemas.Int64Schema
            SettledAmountTo = schemas.Int64Schema
            ReturnedAmountFrom = schemas.Int64Schema
            ReturnedAmountTo = schemas.Int64Schema
            __annotations__ = {
                "MerchantGuid": MerchantGuid,
                "SaleGuid": SaleGuid,
                "IncomingTransactionCode": IncomingTransactionCode,
                "OrderNumber": OrderNumber,
                "CustomerID": CustomerID,
                "TimeStampFrom": TimeStampFrom,
                "TimeStampTo": TimeStampTo,
                "IssuedAmountFrom": IssuedAmountFrom,
                "IssuedAmountTo": IssuedAmountTo,
                "OutgoingTransactionCode": OutgoingTransactionCode,
                "SettledAmountFrom": SettledAmountFrom,
                "SettledAmountTo": SettledAmountTo,
                "ReturnedAmountFrom": ReturnedAmountFrom,
                "ReturnedAmountTo": ReturnedAmountTo,
            }
    
    MerchantGuid: MetaOapg.properties.MerchantGuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MerchantGuid"]) -> MetaOapg.properties.MerchantGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SaleGuid"]) -> MetaOapg.properties.SaleGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IncomingTransactionCode"]) -> MetaOapg.properties.IncomingTransactionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderNumber"]) -> MetaOapg.properties.OrderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CustomerID"]) -> MetaOapg.properties.CustomerID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TimeStampFrom"]) -> MetaOapg.properties.TimeStampFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TimeStampTo"]) -> MetaOapg.properties.TimeStampTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IssuedAmountFrom"]) -> MetaOapg.properties.IssuedAmountFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IssuedAmountTo"]) -> MetaOapg.properties.IssuedAmountTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OutgoingTransactionCode"]) -> MetaOapg.properties.OutgoingTransactionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SettledAmountFrom"]) -> MetaOapg.properties.SettledAmountFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SettledAmountTo"]) -> MetaOapg.properties.SettledAmountTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReturnedAmountFrom"]) -> MetaOapg.properties.ReturnedAmountFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReturnedAmountTo"]) -> MetaOapg.properties.ReturnedAmountTo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["MerchantGuid", "SaleGuid", "IncomingTransactionCode", "OrderNumber", "CustomerID", "TimeStampFrom", "TimeStampTo", "IssuedAmountFrom", "IssuedAmountTo", "OutgoingTransactionCode", "SettledAmountFrom", "SettledAmountTo", "ReturnedAmountFrom", "ReturnedAmountTo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MerchantGuid"]) -> MetaOapg.properties.MerchantGuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SaleGuid"]) -> typing.Union[MetaOapg.properties.SaleGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IncomingTransactionCode"]) -> typing.Union[MetaOapg.properties.IncomingTransactionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderNumber"]) -> typing.Union[MetaOapg.properties.OrderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CustomerID"]) -> typing.Union[MetaOapg.properties.CustomerID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TimeStampFrom"]) -> typing.Union[MetaOapg.properties.TimeStampFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TimeStampTo"]) -> typing.Union[MetaOapg.properties.TimeStampTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IssuedAmountFrom"]) -> typing.Union[MetaOapg.properties.IssuedAmountFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IssuedAmountTo"]) -> typing.Union[MetaOapg.properties.IssuedAmountTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OutgoingTransactionCode"]) -> typing.Union[MetaOapg.properties.OutgoingTransactionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SettledAmountFrom"]) -> typing.Union[MetaOapg.properties.SettledAmountFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SettledAmountTo"]) -> typing.Union[MetaOapg.properties.SettledAmountTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReturnedAmountFrom"]) -> typing.Union[MetaOapg.properties.ReturnedAmountFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReturnedAmountTo"]) -> typing.Union[MetaOapg.properties.ReturnedAmountTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MerchantGuid", "SaleGuid", "IncomingTransactionCode", "OrderNumber", "CustomerID", "TimeStampFrom", "TimeStampTo", "IssuedAmountFrom", "IssuedAmountTo", "OutgoingTransactionCode", "SettledAmountFrom", "SettledAmountTo", "ReturnedAmountFrom", "ReturnedAmountTo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        MerchantGuid: typing.Union[MetaOapg.properties.MerchantGuid, str, ],
        SaleGuid: typing.Union[MetaOapg.properties.SaleGuid, str, schemas.Unset] = schemas.unset,
        IncomingTransactionCode: typing.Union[MetaOapg.properties.IncomingTransactionCode, str, schemas.Unset] = schemas.unset,
        OrderNumber: typing.Union[MetaOapg.properties.OrderNumber, str, schemas.Unset] = schemas.unset,
        CustomerID: typing.Union[MetaOapg.properties.CustomerID, str, schemas.Unset] = schemas.unset,
        TimeStampFrom: typing.Union[MetaOapg.properties.TimeStampFrom, str, date, schemas.Unset] = schemas.unset,
        TimeStampTo: typing.Union[MetaOapg.properties.TimeStampTo, str, date, schemas.Unset] = schemas.unset,
        IssuedAmountFrom: typing.Union[MetaOapg.properties.IssuedAmountFrom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        IssuedAmountTo: typing.Union[MetaOapg.properties.IssuedAmountTo, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        OutgoingTransactionCode: typing.Union[MetaOapg.properties.OutgoingTransactionCode, str, schemas.Unset] = schemas.unset,
        SettledAmountFrom: typing.Union[MetaOapg.properties.SettledAmountFrom, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        SettledAmountTo: typing.Union[MetaOapg.properties.SettledAmountTo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ReturnedAmountFrom: typing.Union[MetaOapg.properties.ReturnedAmountFrom, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ReturnedAmountTo: typing.Union[MetaOapg.properties.ReturnedAmountTo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardSearchIssuedVirtualCardsRequest':
        return super().__new__(
            cls,
            *args,
            MerchantGuid=MerchantGuid,
            SaleGuid=SaleGuid,
            IncomingTransactionCode=IncomingTransactionCode,
            OrderNumber=OrderNumber,
            CustomerID=CustomerID,
            TimeStampFrom=TimeStampFrom,
            TimeStampTo=TimeStampTo,
            IssuedAmountFrom=IssuedAmountFrom,
            IssuedAmountTo=IssuedAmountTo,
            OutgoingTransactionCode=OutgoingTransactionCode,
            SettledAmountFrom=SettledAmountFrom,
            SettledAmountTo=SettledAmountTo,
            ReturnedAmountFrom=ReturnedAmountFrom,
            ReturnedAmountTo=ReturnedAmountTo,
            _configuration=_configuration,
            **kwargs,
        )
