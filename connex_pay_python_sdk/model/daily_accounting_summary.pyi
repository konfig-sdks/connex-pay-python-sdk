# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class DailyAccountingSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            merchantGuid = schemas.UUIDSchema
            
            
            class clientName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            releasedDate = schemas.DateSchema
            priorDayCashBalance = schemas.Float64Schema
            wireAchToFundCashAmount = schemas.Float64Schema
            beginningCashBalance = schemas.Float64Schema
            creditSaleAmount = schemas.Float64Schema
            achSaleAmount = schemas.Float64Schema
            purchaseAchAmount = schemas.Float64Schema
            purchaseCardAmount = schemas.Float64Schema
            purchasePushToCardAmount = schemas.Float64Schema
            creditVoidAmount = schemas.Float64Schema
            creditReturnAmount = schemas.Float64Schema
            creditChargebackAmount = schemas.Float64Schema
            creditAdjustmentAmount = schemas.Float64Schema
            achVoidAmount = schemas.Float64Schema
            achReturnAmount = schemas.Float64Schema
            purchaseCardReturnAmount = schemas.Float64Schema
            purchaseCardChargebackAmount = schemas.Float64Schema
            purchaseAchReturnAmount = schemas.Float64Schema
            totalActivity = schemas.Float64Schema
            newCashBalance = schemas.Float64Schema
            netDebitCreditToClient = schemas.Float64Schema
            endingCashBalance = schemas.Float64Schema
            minimumCashBalance = schemas.Float64Schema
            achDebitRejectAmount = schemas.Float64Schema
            __annotations__ = {
                "merchantGuid": merchantGuid,
                "clientName": clientName,
                "releasedDate": releasedDate,
                "priorDayCashBalance": priorDayCashBalance,
                "wireAchToFundCashAmount": wireAchToFundCashAmount,
                "beginningCashBalance": beginningCashBalance,
                "creditSaleAmount": creditSaleAmount,
                "achSaleAmount": achSaleAmount,
                "purchaseAchAmount": purchaseAchAmount,
                "purchaseCardAmount": purchaseCardAmount,
                "purchasePushToCardAmount": purchasePushToCardAmount,
                "creditVoidAmount": creditVoidAmount,
                "creditReturnAmount": creditReturnAmount,
                "creditChargebackAmount": creditChargebackAmount,
                "creditAdjustmentAmount": creditAdjustmentAmount,
                "achVoidAmount": achVoidAmount,
                "achReturnAmount": achReturnAmount,
                "purchaseCardReturnAmount": purchaseCardReturnAmount,
                "purchaseCardChargebackAmount": purchaseCardChargebackAmount,
                "purchaseAchReturnAmount": purchaseAchReturnAmount,
                "totalActivity": totalActivity,
                "newCashBalance": newCashBalance,
                "netDebitCreditToClient": netDebitCreditToClient,
                "endingCashBalance": endingCashBalance,
                "minimumCashBalance": minimumCashBalance,
                "achDebitRejectAmount": achDebitRejectAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantGuid"]) -> MetaOapg.properties.merchantGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientName"]) -> MetaOapg.properties.clientName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releasedDate"]) -> MetaOapg.properties.releasedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorDayCashBalance"]) -> MetaOapg.properties.priorDayCashBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wireAchToFundCashAmount"]) -> MetaOapg.properties.wireAchToFundCashAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beginningCashBalance"]) -> MetaOapg.properties.beginningCashBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditSaleAmount"]) -> MetaOapg.properties.creditSaleAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["achSaleAmount"]) -> MetaOapg.properties.achSaleAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseAchAmount"]) -> MetaOapg.properties.purchaseAchAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseCardAmount"]) -> MetaOapg.properties.purchaseCardAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchasePushToCardAmount"]) -> MetaOapg.properties.purchasePushToCardAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditVoidAmount"]) -> MetaOapg.properties.creditVoidAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditReturnAmount"]) -> MetaOapg.properties.creditReturnAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditChargebackAmount"]) -> MetaOapg.properties.creditChargebackAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditAdjustmentAmount"]) -> MetaOapg.properties.creditAdjustmentAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["achVoidAmount"]) -> MetaOapg.properties.achVoidAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["achReturnAmount"]) -> MetaOapg.properties.achReturnAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseCardReturnAmount"]) -> MetaOapg.properties.purchaseCardReturnAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseCardChargebackAmount"]) -> MetaOapg.properties.purchaseCardChargebackAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseAchReturnAmount"]) -> MetaOapg.properties.purchaseAchReturnAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalActivity"]) -> MetaOapg.properties.totalActivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newCashBalance"]) -> MetaOapg.properties.newCashBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netDebitCreditToClient"]) -> MetaOapg.properties.netDebitCreditToClient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endingCashBalance"]) -> MetaOapg.properties.endingCashBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumCashBalance"]) -> MetaOapg.properties.minimumCashBalance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["achDebitRejectAmount"]) -> MetaOapg.properties.achDebitRejectAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["merchantGuid", "clientName", "releasedDate", "priorDayCashBalance", "wireAchToFundCashAmount", "beginningCashBalance", "creditSaleAmount", "achSaleAmount", "purchaseAchAmount", "purchaseCardAmount", "purchasePushToCardAmount", "creditVoidAmount", "creditReturnAmount", "creditChargebackAmount", "creditAdjustmentAmount", "achVoidAmount", "achReturnAmount", "purchaseCardReturnAmount", "purchaseCardChargebackAmount", "purchaseAchReturnAmount", "totalActivity", "newCashBalance", "netDebitCreditToClient", "endingCashBalance", "minimumCashBalance", "achDebitRejectAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantGuid"]) -> typing.Union[MetaOapg.properties.merchantGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientName"]) -> typing.Union[MetaOapg.properties.clientName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releasedDate"]) -> typing.Union[MetaOapg.properties.releasedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorDayCashBalance"]) -> typing.Union[MetaOapg.properties.priorDayCashBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wireAchToFundCashAmount"]) -> typing.Union[MetaOapg.properties.wireAchToFundCashAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beginningCashBalance"]) -> typing.Union[MetaOapg.properties.beginningCashBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditSaleAmount"]) -> typing.Union[MetaOapg.properties.creditSaleAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["achSaleAmount"]) -> typing.Union[MetaOapg.properties.achSaleAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseAchAmount"]) -> typing.Union[MetaOapg.properties.purchaseAchAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseCardAmount"]) -> typing.Union[MetaOapg.properties.purchaseCardAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchasePushToCardAmount"]) -> typing.Union[MetaOapg.properties.purchasePushToCardAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditVoidAmount"]) -> typing.Union[MetaOapg.properties.creditVoidAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditReturnAmount"]) -> typing.Union[MetaOapg.properties.creditReturnAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditChargebackAmount"]) -> typing.Union[MetaOapg.properties.creditChargebackAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditAdjustmentAmount"]) -> typing.Union[MetaOapg.properties.creditAdjustmentAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["achVoidAmount"]) -> typing.Union[MetaOapg.properties.achVoidAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["achReturnAmount"]) -> typing.Union[MetaOapg.properties.achReturnAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseCardReturnAmount"]) -> typing.Union[MetaOapg.properties.purchaseCardReturnAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseCardChargebackAmount"]) -> typing.Union[MetaOapg.properties.purchaseCardChargebackAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseAchReturnAmount"]) -> typing.Union[MetaOapg.properties.purchaseAchReturnAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalActivity"]) -> typing.Union[MetaOapg.properties.totalActivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newCashBalance"]) -> typing.Union[MetaOapg.properties.newCashBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netDebitCreditToClient"]) -> typing.Union[MetaOapg.properties.netDebitCreditToClient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endingCashBalance"]) -> typing.Union[MetaOapg.properties.endingCashBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumCashBalance"]) -> typing.Union[MetaOapg.properties.minimumCashBalance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["achDebitRejectAmount"]) -> typing.Union[MetaOapg.properties.achDebitRejectAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["merchantGuid", "clientName", "releasedDate", "priorDayCashBalance", "wireAchToFundCashAmount", "beginningCashBalance", "creditSaleAmount", "achSaleAmount", "purchaseAchAmount", "purchaseCardAmount", "purchasePushToCardAmount", "creditVoidAmount", "creditReturnAmount", "creditChargebackAmount", "creditAdjustmentAmount", "achVoidAmount", "achReturnAmount", "purchaseCardReturnAmount", "purchaseCardChargebackAmount", "purchaseAchReturnAmount", "totalActivity", "newCashBalance", "netDebitCreditToClient", "endingCashBalance", "minimumCashBalance", "achDebitRejectAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        merchantGuid: typing.Union[MetaOapg.properties.merchantGuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        clientName: typing.Union[MetaOapg.properties.clientName, None, str, schemas.Unset] = schemas.unset,
        releasedDate: typing.Union[MetaOapg.properties.releasedDate, str, date, schemas.Unset] = schemas.unset,
        priorDayCashBalance: typing.Union[MetaOapg.properties.priorDayCashBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wireAchToFundCashAmount: typing.Union[MetaOapg.properties.wireAchToFundCashAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beginningCashBalance: typing.Union[MetaOapg.properties.beginningCashBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        creditSaleAmount: typing.Union[MetaOapg.properties.creditSaleAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        achSaleAmount: typing.Union[MetaOapg.properties.achSaleAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purchaseAchAmount: typing.Union[MetaOapg.properties.purchaseAchAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purchaseCardAmount: typing.Union[MetaOapg.properties.purchaseCardAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purchasePushToCardAmount: typing.Union[MetaOapg.properties.purchasePushToCardAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        creditVoidAmount: typing.Union[MetaOapg.properties.creditVoidAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        creditReturnAmount: typing.Union[MetaOapg.properties.creditReturnAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        creditChargebackAmount: typing.Union[MetaOapg.properties.creditChargebackAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        creditAdjustmentAmount: typing.Union[MetaOapg.properties.creditAdjustmentAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        achVoidAmount: typing.Union[MetaOapg.properties.achVoidAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        achReturnAmount: typing.Union[MetaOapg.properties.achReturnAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purchaseCardReturnAmount: typing.Union[MetaOapg.properties.purchaseCardReturnAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purchaseCardChargebackAmount: typing.Union[MetaOapg.properties.purchaseCardChargebackAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        purchaseAchReturnAmount: typing.Union[MetaOapg.properties.purchaseAchReturnAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalActivity: typing.Union[MetaOapg.properties.totalActivity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        newCashBalance: typing.Union[MetaOapg.properties.newCashBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netDebitCreditToClient: typing.Union[MetaOapg.properties.netDebitCreditToClient, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        endingCashBalance: typing.Union[MetaOapg.properties.endingCashBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minimumCashBalance: typing.Union[MetaOapg.properties.minimumCashBalance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        achDebitRejectAmount: typing.Union[MetaOapg.properties.achDebitRejectAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DailyAccountingSummary':
        return super().__new__(
            cls,
            *args,
            merchantGuid=merchantGuid,
            clientName=clientName,
            releasedDate=releasedDate,
            priorDayCashBalance=priorDayCashBalance,
            wireAchToFundCashAmount=wireAchToFundCashAmount,
            beginningCashBalance=beginningCashBalance,
            creditSaleAmount=creditSaleAmount,
            achSaleAmount=achSaleAmount,
            purchaseAchAmount=purchaseAchAmount,
            purchaseCardAmount=purchaseCardAmount,
            purchasePushToCardAmount=purchasePushToCardAmount,
            creditVoidAmount=creditVoidAmount,
            creditReturnAmount=creditReturnAmount,
            creditChargebackAmount=creditChargebackAmount,
            creditAdjustmentAmount=creditAdjustmentAmount,
            achVoidAmount=achVoidAmount,
            achReturnAmount=achReturnAmount,
            purchaseCardReturnAmount=purchaseCardReturnAmount,
            purchaseCardChargebackAmount=purchaseCardChargebackAmount,
            purchaseAchReturnAmount=purchaseAchReturnAmount,
            totalActivity=totalActivity,
            newCashBalance=newCashBalance,
            netDebitCreditToClient=netDebitCreditToClient,
            endingCashBalance=endingCashBalance,
            minimumCashBalance=minimumCashBalance,
            achDebitRejectAmount=achDebitRejectAmount,
            _configuration=_configuration,
            **kwargs,
        )
