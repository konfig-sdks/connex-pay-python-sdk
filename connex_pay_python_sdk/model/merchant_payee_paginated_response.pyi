# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class MerchantPayeePaginatedResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            totalCount = schemas.Int32Schema
            totalPageCount = schemas.Int32Schema
            pageSize = schemas.Int32Schema
            currentPage = schemas.Int32Schema
            
            
            class searchResults(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MerchantPayeeDto']:
                        return MerchantPayeeDto
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MerchantPayeeDto'], typing.List['MerchantPayeeDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'searchResults':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MerchantPayeeDto':
                    return super().__getitem__(i)
            __annotations__ = {
                "totalCount": totalCount,
                "totalPageCount": totalPageCount,
                "pageSize": pageSize,
                "currentPage": currentPage,
                "searchResults": searchResults,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCount"]) -> MetaOapg.properties.totalCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPageCount"]) -> MetaOapg.properties.totalPageCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageSize"]) -> MetaOapg.properties.pageSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPage"]) -> MetaOapg.properties.currentPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searchResults"]) -> MetaOapg.properties.searchResults: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalCount", "totalPageCount", "pageSize", "currentPage", "searchResults", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCount"]) -> typing.Union[MetaOapg.properties.totalCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPageCount"]) -> typing.Union[MetaOapg.properties.totalPageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageSize"]) -> typing.Union[MetaOapg.properties.pageSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPage"]) -> typing.Union[MetaOapg.properties.currentPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searchResults"]) -> typing.Union[MetaOapg.properties.searchResults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalCount", "totalPageCount", "pageSize", "currentPage", "searchResults", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        totalCount: typing.Union[MetaOapg.properties.totalCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalPageCount: typing.Union[MetaOapg.properties.totalPageCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageSize: typing.Union[MetaOapg.properties.pageSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currentPage: typing.Union[MetaOapg.properties.currentPage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        searchResults: typing.Union[MetaOapg.properties.searchResults, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantPayeePaginatedResponse':
        return super().__new__(
            cls,
            *args,
            totalCount=totalCount,
            totalPageCount=totalPageCount,
            pageSize=pageSize,
            currentPage=currentPage,
            searchResults=searchResults,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.merchant_payee_dto import MerchantPayeeDto
