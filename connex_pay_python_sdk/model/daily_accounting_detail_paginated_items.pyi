# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class DailyAccountingDetailPaginatedItems(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            totalItemCount = schemas.Int32Schema
            pageCount = schemas.Int32Schema
            pageItemCount = schemas.Int32Schema
            pageNumber = schemas.Int32Schema
            
            
            class items(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DailyAccountingDetail']:
                        return DailyAccountingDetail
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "totalItemCount": totalItemCount,
                "pageCount": pageCount,
                "pageItemCount": pageItemCount,
                "pageNumber": pageNumber,
                "items": items,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalItemCount"]) -> MetaOapg.properties.totalItemCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageCount"]) -> MetaOapg.properties.pageCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageItemCount"]) -> MetaOapg.properties.pageItemCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageNumber"]) -> MetaOapg.properties.pageNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalItemCount", "pageCount", "pageItemCount", "pageNumber", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalItemCount"]) -> typing.Union[MetaOapg.properties.totalItemCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageCount"]) -> typing.Union[MetaOapg.properties.pageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageItemCount"]) -> typing.Union[MetaOapg.properties.pageItemCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageNumber"]) -> typing.Union[MetaOapg.properties.pageNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalItemCount", "pageCount", "pageItemCount", "pageNumber", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        totalItemCount: typing.Union[MetaOapg.properties.totalItemCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageCount: typing.Union[MetaOapg.properties.pageCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageItemCount: typing.Union[MetaOapg.properties.pageItemCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageNumber: typing.Union[MetaOapg.properties.pageNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DailyAccountingDetailPaginatedItems':
        return super().__new__(
            cls,
            *args,
            totalItemCount=totalItemCount,
            pageCount=pageCount,
            pageItemCount=pageItemCount,
            pageNumber=pageNumber,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.daily_accounting_detail import DailyAccountingDetail
