# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class FundingMerchantCashBalanceResponseBankAccount(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            guid = schemas.StrSchema
            accountType = schemas.StrSchema
            accountNumberLastFour = schemas.StrSchema
            nameOnAccount = schemas.StrSchema
        
            @staticmethod
            def customer() -> typing.Type['FundingMerchantCashBalanceResponseBankAccountCustomer']:
                return FundingMerchantCashBalanceResponseBankAccountCustomer
            __annotations__ = {
                "guid": guid,
                "accountType": accountType,
                "accountNumberLastFour": accountNumberLastFour,
                "nameOnAccount": nameOnAccount,
                "customer": customer,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountType"]) -> MetaOapg.properties.accountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountNumberLastFour"]) -> MetaOapg.properties.accountNumberLastFour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameOnAccount"]) -> MetaOapg.properties.nameOnAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'FundingMerchantCashBalanceResponseBankAccountCustomer': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["guid", "accountType", "accountNumberLastFour", "nameOnAccount", "customer", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountType"]) -> typing.Union[MetaOapg.properties.accountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountNumberLastFour"]) -> typing.Union[MetaOapg.properties.accountNumberLastFour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameOnAccount"]) -> typing.Union[MetaOapg.properties.nameOnAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['FundingMerchantCashBalanceResponseBankAccountCustomer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["guid", "accountType", "accountNumberLastFour", "nameOnAccount", "customer", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
        accountType: typing.Union[MetaOapg.properties.accountType, str, schemas.Unset] = schemas.unset,
        accountNumberLastFour: typing.Union[MetaOapg.properties.accountNumberLastFour, str, schemas.Unset] = schemas.unset,
        nameOnAccount: typing.Union[MetaOapg.properties.nameOnAccount, str, schemas.Unset] = schemas.unset,
        customer: typing.Union['FundingMerchantCashBalanceResponseBankAccountCustomer', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FundingMerchantCashBalanceResponseBankAccount':
        return super().__new__(
            cls,
            *args,
            guid=guid,
            accountType=accountType,
            accountNumberLastFour=accountNumberLastFour,
            nameOnAccount=nameOnAccount,
            customer=customer,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.funding_merchant_cash_balance_response_bank_account_customer import FundingMerchantCashBalanceResponseBankAccountCustomer
