# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class ReplayPurchaseEventHistoryResendRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            SourceGuid = schemas.StrSchema
            MerchantGuid = schemas.StrSchema
            EventGuid = schemas.StrSchema
            FromDateTime = schemas.DateSchema
            ToDateTime = schemas.DateSchema
            __annotations__ = {
                "SourceGuid": SourceGuid,
                "MerchantGuid": MerchantGuid,
                "EventGuid": EventGuid,
                "FromDateTime": FromDateTime,
                "ToDateTime": ToDateTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SourceGuid"]) -> MetaOapg.properties.SourceGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MerchantGuid"]) -> MetaOapg.properties.MerchantGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EventGuid"]) -> MetaOapg.properties.EventGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FromDateTime"]) -> MetaOapg.properties.FromDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ToDateTime"]) -> MetaOapg.properties.ToDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SourceGuid", "MerchantGuid", "EventGuid", "FromDateTime", "ToDateTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SourceGuid"]) -> typing.Union[MetaOapg.properties.SourceGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MerchantGuid"]) -> typing.Union[MetaOapg.properties.MerchantGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EventGuid"]) -> typing.Union[MetaOapg.properties.EventGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FromDateTime"]) -> typing.Union[MetaOapg.properties.FromDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ToDateTime"]) -> typing.Union[MetaOapg.properties.ToDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SourceGuid", "MerchantGuid", "EventGuid", "FromDateTime", "ToDateTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        SourceGuid: typing.Union[MetaOapg.properties.SourceGuid, str, schemas.Unset] = schemas.unset,
        MerchantGuid: typing.Union[MetaOapg.properties.MerchantGuid, str, schemas.Unset] = schemas.unset,
        EventGuid: typing.Union[MetaOapg.properties.EventGuid, str, schemas.Unset] = schemas.unset,
        FromDateTime: typing.Union[MetaOapg.properties.FromDateTime, str, date, schemas.Unset] = schemas.unset,
        ToDateTime: typing.Union[MetaOapg.properties.ToDateTime, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReplayPurchaseEventHistoryResendRequest':
        return super().__new__(
            cls,
            *args,
            SourceGuid=SourceGuid,
            MerchantGuid=MerchantGuid,
            EventGuid=EventGuid,
            FromDateTime=FromDateTime,
            ToDateTime=ToDateTime,
            _configuration=_configuration,
            **kwargs,
        )
