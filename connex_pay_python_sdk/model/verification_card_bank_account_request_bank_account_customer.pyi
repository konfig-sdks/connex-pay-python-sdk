# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class VerificationCardBankAccountRequestBankAccountCustomer(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            FirstName = schemas.StrSchema
            LastName = schemas.StrSchema
            Phone = schemas.StrSchema
            City = schemas.StrSchema
            State = schemas.StrSchema
            Country = schemas.StrSchema
            Email = schemas.StrSchema
            Address1 = schemas.StrSchema
            Address2 = schemas.StrSchema
            Zip = schemas.StrSchema
            DateOfBirth = schemas.DateSchema
            DriversLicenseNumber = schemas.Int32Schema
            DriversLicenseState = schemas.StrSchema
            SSN4 = schemas.Int32Schema
            __annotations__ = {
                "FirstName": FirstName,
                "LastName": LastName,
                "Phone": Phone,
                "City": City,
                "State": State,
                "Country": Country,
                "Email": Email,
                "Address1": Address1,
                "Address2": Address2,
                "Zip": Zip,
                "DateOfBirth": DateOfBirth,
                "DriversLicenseNumber": DriversLicenseNumber,
                "DriversLicenseState": DriversLicenseState,
                "SSN4": SSN4,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FirstName"]) -> MetaOapg.properties.FirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastName"]) -> MetaOapg.properties.LastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Phone"]) -> MetaOapg.properties.Phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["City"]) -> MetaOapg.properties.City: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["State"]) -> MetaOapg.properties.State: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Country"]) -> MetaOapg.properties.Country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Address1"]) -> MetaOapg.properties.Address1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Address2"]) -> MetaOapg.properties.Address2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Zip"]) -> MetaOapg.properties.Zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DateOfBirth"]) -> MetaOapg.properties.DateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DriversLicenseNumber"]) -> MetaOapg.properties.DriversLicenseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DriversLicenseState"]) -> MetaOapg.properties.DriversLicenseState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SSN4"]) -> MetaOapg.properties.SSN4: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FirstName", "LastName", "Phone", "City", "State", "Country", "Email", "Address1", "Address2", "Zip", "DateOfBirth", "DriversLicenseNumber", "DriversLicenseState", "SSN4", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FirstName"]) -> typing.Union[MetaOapg.properties.FirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastName"]) -> typing.Union[MetaOapg.properties.LastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Phone"]) -> typing.Union[MetaOapg.properties.Phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["City"]) -> typing.Union[MetaOapg.properties.City, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["State"]) -> typing.Union[MetaOapg.properties.State, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Country"]) -> typing.Union[MetaOapg.properties.Country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Address1"]) -> typing.Union[MetaOapg.properties.Address1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Address2"]) -> typing.Union[MetaOapg.properties.Address2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Zip"]) -> typing.Union[MetaOapg.properties.Zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DateOfBirth"]) -> typing.Union[MetaOapg.properties.DateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DriversLicenseNumber"]) -> typing.Union[MetaOapg.properties.DriversLicenseNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DriversLicenseState"]) -> typing.Union[MetaOapg.properties.DriversLicenseState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SSN4"]) -> typing.Union[MetaOapg.properties.SSN4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FirstName", "LastName", "Phone", "City", "State", "Country", "Email", "Address1", "Address2", "Zip", "DateOfBirth", "DriversLicenseNumber", "DriversLicenseState", "SSN4", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FirstName: typing.Union[MetaOapg.properties.FirstName, str, schemas.Unset] = schemas.unset,
        LastName: typing.Union[MetaOapg.properties.LastName, str, schemas.Unset] = schemas.unset,
        Phone: typing.Union[MetaOapg.properties.Phone, str, schemas.Unset] = schemas.unset,
        City: typing.Union[MetaOapg.properties.City, str, schemas.Unset] = schemas.unset,
        State: typing.Union[MetaOapg.properties.State, str, schemas.Unset] = schemas.unset,
        Country: typing.Union[MetaOapg.properties.Country, str, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        Address1: typing.Union[MetaOapg.properties.Address1, str, schemas.Unset] = schemas.unset,
        Address2: typing.Union[MetaOapg.properties.Address2, str, schemas.Unset] = schemas.unset,
        Zip: typing.Union[MetaOapg.properties.Zip, str, schemas.Unset] = schemas.unset,
        DateOfBirth: typing.Union[MetaOapg.properties.DateOfBirth, str, date, schemas.Unset] = schemas.unset,
        DriversLicenseNumber: typing.Union[MetaOapg.properties.DriversLicenseNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        DriversLicenseState: typing.Union[MetaOapg.properties.DriversLicenseState, str, schemas.Unset] = schemas.unset,
        SSN4: typing.Union[MetaOapg.properties.SSN4, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VerificationCardBankAccountRequestBankAccountCustomer':
        return super().__new__(
            cls,
            *args,
            FirstName=FirstName,
            LastName=LastName,
            Phone=Phone,
            City=City,
            State=State,
            Country=Country,
            Email=Email,
            Address1=Address1,
            Address2=Address2,
            Zip=Zip,
            DateOfBirth=DateOfBirth,
            DriversLicenseNumber=DriversLicenseNumber,
            DriversLicenseState=DriversLicenseState,
            SSN4=SSN4,
            _configuration=_configuration,
            **kwargs,
        )
