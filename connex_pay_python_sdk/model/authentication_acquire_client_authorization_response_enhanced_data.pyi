# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class AuthenticationAcquireClientAuthorizationResponseEnhancedData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            saleTax = schemas.IntSchema
            purchaseOrder = schemas.StrSchema
            additionalTaxDetailTaxCategory = schemas.StrSchema
            additionalTaxDetailTaxType = schemas.StrSchema
            additionalTaxDetailTaxAmount = schemas.IntSchema
            additionalTaxDetailTaxRate = schemas.NumberSchema
            shippingCharges = schemas.IntSchema
            dutyCharges = schemas.NumberSchema
            shipToZip = schemas.StrSchema
            shipFromZip = schemas.StrSchema
            destinationCountryCode = schemas.StrSchema
            customerVATNumber = schemas.StrSchema
            summaryCommodityCode = schemas.StrSchema
            vatInvoice = schemas.StrSchema
            orderDate = schemas.StrSchema
            supplierReferenceNumber = schemas.StrSchema
            customerRefID = schemas.StrSchema
            chargeDescriptor = schemas.StrSchema
            productName = schemas.StrSchema
            productCode = schemas.StrSchema
            price = schemas.IntSchema
            additionalAmount = schemas.NumberSchema
            additionalAmountType = schemas.StrSchema
            __annotations__ = {
                "saleTax": saleTax,
                "purchaseOrder": purchaseOrder,
                "additionalTaxDetailTaxCategory": additionalTaxDetailTaxCategory,
                "additionalTaxDetailTaxType": additionalTaxDetailTaxType,
                "additionalTaxDetailTaxAmount": additionalTaxDetailTaxAmount,
                "additionalTaxDetailTaxRate": additionalTaxDetailTaxRate,
                "shippingCharges": shippingCharges,
                "dutyCharges": dutyCharges,
                "shipToZip": shipToZip,
                "shipFromZip": shipFromZip,
                "destinationCountryCode": destinationCountryCode,
                "customerVATNumber": customerVATNumber,
                "summaryCommodityCode": summaryCommodityCode,
                "vatInvoice": vatInvoice,
                "orderDate": orderDate,
                "supplierReferenceNumber": supplierReferenceNumber,
                "customerRefID": customerRefID,
                "chargeDescriptor": chargeDescriptor,
                "productName": productName,
                "productCode": productCode,
                "price": price,
                "additionalAmount": additionalAmount,
                "additionalAmountType": additionalAmountType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saleTax"]) -> MetaOapg.properties.saleTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseOrder"]) -> MetaOapg.properties.purchaseOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalTaxDetailTaxCategory"]) -> MetaOapg.properties.additionalTaxDetailTaxCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalTaxDetailTaxType"]) -> MetaOapg.properties.additionalTaxDetailTaxType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalTaxDetailTaxAmount"]) -> MetaOapg.properties.additionalTaxDetailTaxAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalTaxDetailTaxRate"]) -> MetaOapg.properties.additionalTaxDetailTaxRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shippingCharges"]) -> MetaOapg.properties.shippingCharges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dutyCharges"]) -> MetaOapg.properties.dutyCharges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipToZip"]) -> MetaOapg.properties.shipToZip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipFromZip"]) -> MetaOapg.properties.shipFromZip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationCountryCode"]) -> MetaOapg.properties.destinationCountryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerVATNumber"]) -> MetaOapg.properties.customerVATNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summaryCommodityCode"]) -> MetaOapg.properties.summaryCommodityCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vatInvoice"]) -> MetaOapg.properties.vatInvoice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderDate"]) -> MetaOapg.properties.orderDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supplierReferenceNumber"]) -> MetaOapg.properties.supplierReferenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerRefID"]) -> MetaOapg.properties.customerRefID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chargeDescriptor"]) -> MetaOapg.properties.chargeDescriptor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productName"]) -> MetaOapg.properties.productName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productCode"]) -> MetaOapg.properties.productCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalAmount"]) -> MetaOapg.properties.additionalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalAmountType"]) -> MetaOapg.properties.additionalAmountType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["saleTax", "purchaseOrder", "additionalTaxDetailTaxCategory", "additionalTaxDetailTaxType", "additionalTaxDetailTaxAmount", "additionalTaxDetailTaxRate", "shippingCharges", "dutyCharges", "shipToZip", "shipFromZip", "destinationCountryCode", "customerVATNumber", "summaryCommodityCode", "vatInvoice", "orderDate", "supplierReferenceNumber", "customerRefID", "chargeDescriptor", "productName", "productCode", "price", "additionalAmount", "additionalAmountType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saleTax"]) -> typing.Union[MetaOapg.properties.saleTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseOrder"]) -> typing.Union[MetaOapg.properties.purchaseOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalTaxDetailTaxCategory"]) -> typing.Union[MetaOapg.properties.additionalTaxDetailTaxCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalTaxDetailTaxType"]) -> typing.Union[MetaOapg.properties.additionalTaxDetailTaxType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalTaxDetailTaxAmount"]) -> typing.Union[MetaOapg.properties.additionalTaxDetailTaxAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalTaxDetailTaxRate"]) -> typing.Union[MetaOapg.properties.additionalTaxDetailTaxRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shippingCharges"]) -> typing.Union[MetaOapg.properties.shippingCharges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dutyCharges"]) -> typing.Union[MetaOapg.properties.dutyCharges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipToZip"]) -> typing.Union[MetaOapg.properties.shipToZip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipFromZip"]) -> typing.Union[MetaOapg.properties.shipFromZip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationCountryCode"]) -> typing.Union[MetaOapg.properties.destinationCountryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerVATNumber"]) -> typing.Union[MetaOapg.properties.customerVATNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summaryCommodityCode"]) -> typing.Union[MetaOapg.properties.summaryCommodityCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vatInvoice"]) -> typing.Union[MetaOapg.properties.vatInvoice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderDate"]) -> typing.Union[MetaOapg.properties.orderDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supplierReferenceNumber"]) -> typing.Union[MetaOapg.properties.supplierReferenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerRefID"]) -> typing.Union[MetaOapg.properties.customerRefID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chargeDescriptor"]) -> typing.Union[MetaOapg.properties.chargeDescriptor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productName"]) -> typing.Union[MetaOapg.properties.productName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productCode"]) -> typing.Union[MetaOapg.properties.productCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalAmount"]) -> typing.Union[MetaOapg.properties.additionalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalAmountType"]) -> typing.Union[MetaOapg.properties.additionalAmountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["saleTax", "purchaseOrder", "additionalTaxDetailTaxCategory", "additionalTaxDetailTaxType", "additionalTaxDetailTaxAmount", "additionalTaxDetailTaxRate", "shippingCharges", "dutyCharges", "shipToZip", "shipFromZip", "destinationCountryCode", "customerVATNumber", "summaryCommodityCode", "vatInvoice", "orderDate", "supplierReferenceNumber", "customerRefID", "chargeDescriptor", "productName", "productCode", "price", "additionalAmount", "additionalAmountType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        saleTax: typing.Union[MetaOapg.properties.saleTax, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchaseOrder: typing.Union[MetaOapg.properties.purchaseOrder, str, schemas.Unset] = schemas.unset,
        additionalTaxDetailTaxCategory: typing.Union[MetaOapg.properties.additionalTaxDetailTaxCategory, str, schemas.Unset] = schemas.unset,
        additionalTaxDetailTaxType: typing.Union[MetaOapg.properties.additionalTaxDetailTaxType, str, schemas.Unset] = schemas.unset,
        additionalTaxDetailTaxAmount: typing.Union[MetaOapg.properties.additionalTaxDetailTaxAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        additionalTaxDetailTaxRate: typing.Union[MetaOapg.properties.additionalTaxDetailTaxRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shippingCharges: typing.Union[MetaOapg.properties.shippingCharges, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dutyCharges: typing.Union[MetaOapg.properties.dutyCharges, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shipToZip: typing.Union[MetaOapg.properties.shipToZip, str, schemas.Unset] = schemas.unset,
        shipFromZip: typing.Union[MetaOapg.properties.shipFromZip, str, schemas.Unset] = schemas.unset,
        destinationCountryCode: typing.Union[MetaOapg.properties.destinationCountryCode, str, schemas.Unset] = schemas.unset,
        customerVATNumber: typing.Union[MetaOapg.properties.customerVATNumber, str, schemas.Unset] = schemas.unset,
        summaryCommodityCode: typing.Union[MetaOapg.properties.summaryCommodityCode, str, schemas.Unset] = schemas.unset,
        vatInvoice: typing.Union[MetaOapg.properties.vatInvoice, str, schemas.Unset] = schemas.unset,
        orderDate: typing.Union[MetaOapg.properties.orderDate, str, schemas.Unset] = schemas.unset,
        supplierReferenceNumber: typing.Union[MetaOapg.properties.supplierReferenceNumber, str, schemas.Unset] = schemas.unset,
        customerRefID: typing.Union[MetaOapg.properties.customerRefID, str, schemas.Unset] = schemas.unset,
        chargeDescriptor: typing.Union[MetaOapg.properties.chargeDescriptor, str, schemas.Unset] = schemas.unset,
        productName: typing.Union[MetaOapg.properties.productName, str, schemas.Unset] = schemas.unset,
        productCode: typing.Union[MetaOapg.properties.productCode, str, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        additionalAmount: typing.Union[MetaOapg.properties.additionalAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        additionalAmountType: typing.Union[MetaOapg.properties.additionalAmountType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthenticationAcquireClientAuthorizationResponseEnhancedData':
        return super().__new__(
            cls,
            *args,
            saleTax=saleTax,
            purchaseOrder=purchaseOrder,
            additionalTaxDetailTaxCategory=additionalTaxDetailTaxCategory,
            additionalTaxDetailTaxType=additionalTaxDetailTaxType,
            additionalTaxDetailTaxAmount=additionalTaxDetailTaxAmount,
            additionalTaxDetailTaxRate=additionalTaxDetailTaxRate,
            shippingCharges=shippingCharges,
            dutyCharges=dutyCharges,
            shipToZip=shipToZip,
            shipFromZip=shipFromZip,
            destinationCountryCode=destinationCountryCode,
            customerVATNumber=customerVATNumber,
            summaryCommodityCode=summaryCommodityCode,
            vatInvoice=vatInvoice,
            orderDate=orderDate,
            supplierReferenceNumber=supplierReferenceNumber,
            customerRefID=customerRefID,
            chargeDescriptor=chargeDescriptor,
            productName=productName,
            productCode=productCode,
            price=price,
            additionalAmount=additionalAmount,
            additionalAmountType=additionalAmountType,
            _configuration=_configuration,
            **kwargs,
        )
