# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class AuthenticationAcquireClientAuthorizationRequestCard(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Mandatory if TenderType is Credit or not set. Card Data. This will be ignored if TenderType is Cash and should be set to NULL or not supplied when TenderType is ACH
    """


    class MetaOapg:
        
        class properties:
            CardNumber = schemas.StrSchema
            CardHolderName = schemas.StrSchema
            Cvv2 = schemas.StrSchema
            ExpirationDate = schemas.DateSchema
            Guid = schemas.StrSchema
            IsRecurring = schemas.BoolSchema
        
            @staticmethod
            def Customer() -> typing.Type['AuthenticationAcquireClientAuthorizationRequestCardCustomer']:
                return AuthenticationAcquireClientAuthorizationRequestCardCustomer
        
            @staticmethod
            def ThreeDS() -> typing.Type['AuthenticationAcquireClientAuthorizationRequestCardThreeDs']:
                return AuthenticationAcquireClientAuthorizationRequestCardThreeDs
            __annotations__ = {
                "CardNumber": CardNumber,
                "CardHolderName": CardHolderName,
                "Cvv2": Cvv2,
                "ExpirationDate": ExpirationDate,
                "Guid": Guid,
                "IsRecurring": IsRecurring,
                "Customer": Customer,
                "ThreeDS": ThreeDS,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardNumber"]) -> MetaOapg.properties.CardNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardHolderName"]) -> MetaOapg.properties.CardHolderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Cvv2"]) -> MetaOapg.properties.Cvv2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExpirationDate"]) -> MetaOapg.properties.ExpirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Guid"]) -> MetaOapg.properties.Guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsRecurring"]) -> MetaOapg.properties.IsRecurring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Customer"]) -> 'AuthenticationAcquireClientAuthorizationRequestCardCustomer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ThreeDS"]) -> 'AuthenticationAcquireClientAuthorizationRequestCardThreeDs': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["CardNumber", "CardHolderName", "Cvv2", "ExpirationDate", "Guid", "IsRecurring", "Customer", "ThreeDS", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardNumber"]) -> typing.Union[MetaOapg.properties.CardNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardHolderName"]) -> typing.Union[MetaOapg.properties.CardHolderName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Cvv2"]) -> typing.Union[MetaOapg.properties.Cvv2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExpirationDate"]) -> typing.Union[MetaOapg.properties.ExpirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Guid"]) -> typing.Union[MetaOapg.properties.Guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsRecurring"]) -> typing.Union[MetaOapg.properties.IsRecurring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Customer"]) -> typing.Union['AuthenticationAcquireClientAuthorizationRequestCardCustomer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ThreeDS"]) -> typing.Union['AuthenticationAcquireClientAuthorizationRequestCardThreeDs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CardNumber", "CardHolderName", "Cvv2", "ExpirationDate", "Guid", "IsRecurring", "Customer", "ThreeDS", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        CardNumber: typing.Union[MetaOapg.properties.CardNumber, str, schemas.Unset] = schemas.unset,
        CardHolderName: typing.Union[MetaOapg.properties.CardHolderName, str, schemas.Unset] = schemas.unset,
        Cvv2: typing.Union[MetaOapg.properties.Cvv2, str, schemas.Unset] = schemas.unset,
        ExpirationDate: typing.Union[MetaOapg.properties.ExpirationDate, str, date, schemas.Unset] = schemas.unset,
        Guid: typing.Union[MetaOapg.properties.Guid, str, schemas.Unset] = schemas.unset,
        IsRecurring: typing.Union[MetaOapg.properties.IsRecurring, bool, schemas.Unset] = schemas.unset,
        Customer: typing.Union['AuthenticationAcquireClientAuthorizationRequestCardCustomer', schemas.Unset] = schemas.unset,
        ThreeDS: typing.Union['AuthenticationAcquireClientAuthorizationRequestCardThreeDs', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthenticationAcquireClientAuthorizationRequestCard':
        return super().__new__(
            cls,
            *args,
            CardNumber=CardNumber,
            CardHolderName=CardHolderName,
            Cvv2=Cvv2,
            ExpirationDate=ExpirationDate,
            Guid=Guid,
            IsRecurring=IsRecurring,
            Customer=Customer,
            ThreeDS=ThreeDS,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.authentication_acquire_client_authorization_request_card_customer import AuthenticationAcquireClientAuthorizationRequestCardCustomer
from connex_pay_python_sdk.model.authentication_acquire_client_authorization_request_card_three_ds import AuthenticationAcquireClientAuthorizationRequestCardThreeDs
