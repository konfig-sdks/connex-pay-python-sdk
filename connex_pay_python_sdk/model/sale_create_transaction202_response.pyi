# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SaleCreateTransaction202Response(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    version = schemas.StrSchema
                    guid = schemas.StrSchema
                    status = schemas.StrSchema
                    timeStamp = schemas.StrSchema
                    deviceGuid = schemas.StrSchema
                    amount = schemas.NumberSchema
                    redirectUrl = schemas.StrSchema
                    redirectUrlRequestPayload = schemas.StrSchema
                    
                    
                    class card(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                first6 = schemas.StrSchema
                                first4 = schemas.StrSchema
                                last4 = schemas.StrSchema
                                cardHolderName = schemas.StrSchema
                                cardType = schemas.StrSchema
                                expirationDate = schemas.StrSchema
                                guid = schemas.StrSchema
                                __annotations__ = {
                                    "first6": first6,
                                    "first4": first4,
                                    "last4": last4,
                                    "cardHolderName": cardHolderName,
                                    "cardType": cardType,
                                    "expirationDate": expirationDate,
                                    "guid": guid,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["first6"]) -> MetaOapg.properties.first6: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["first4"]) -> MetaOapg.properties.first4: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["last4"]) -> MetaOapg.properties.last4: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardType"]) -> MetaOapg.properties.cardType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["first6", "first4", "last4", "cardHolderName", "cardType", "expirationDate", "guid", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["first6"]) -> typing.Union[MetaOapg.properties.first6, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["first4"]) -> typing.Union[MetaOapg.properties.first4, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["last4"]) -> typing.Union[MetaOapg.properties.last4, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardHolderName"]) -> typing.Union[MetaOapg.properties.cardHolderName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardType"]) -> typing.Union[MetaOapg.properties.cardType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first6", "first4", "last4", "cardHolderName", "cardType", "expirationDate", "guid", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            first6: typing.Union[MetaOapg.properties.first6, str, schemas.Unset] = schemas.unset,
                            first4: typing.Union[MetaOapg.properties.first4, str, schemas.Unset] = schemas.unset,
                            last4: typing.Union[MetaOapg.properties.last4, str, schemas.Unset] = schemas.unset,
                            cardHolderName: typing.Union[MetaOapg.properties.cardHolderName, str, schemas.Unset] = schemas.unset,
                            cardType: typing.Union[MetaOapg.properties.cardType, str, schemas.Unset] = schemas.unset,
                            expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, schemas.Unset] = schemas.unset,
                            guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'card':
                            return super().__new__(
                                cls,
                                *args,
                                first6=first6,
                                first4=first4,
                                last4=last4,
                                cardHolderName=cardHolderName,
                                cardType=cardType,
                                expirationDate=expirationDate,
                                guid=guid,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    exemptThreeDSRequest = schemas.BoolSchema
                    exemptThreeDSPayment = schemas.BoolSchema
                    __annotations__ = {
                        "version": version,
                        "guid": guid,
                        "status": status,
                        "timeStamp": timeStamp,
                        "deviceGuid": deviceGuid,
                        "amount": amount,
                        "redirectUrl": redirectUrl,
                        "redirectUrlRequestPayload": redirectUrlRequestPayload,
                        "card": card,
                        "exemptThreeDSRequest": exemptThreeDSRequest,
                        "exemptThreeDSPayment": exemptThreeDSPayment,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deviceGuid"]) -> MetaOapg.properties.deviceGuid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["redirectUrlRequestPayload"]) -> MetaOapg.properties.redirectUrlRequestPayload: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["card"]) -> MetaOapg.properties.card: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["exemptThreeDSRequest"]) -> MetaOapg.properties.exemptThreeDSRequest: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["exemptThreeDSPayment"]) -> MetaOapg.properties.exemptThreeDSPayment: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "guid", "status", "timeStamp", "deviceGuid", "amount", "redirectUrl", "redirectUrlRequestPayload", "card", "exemptThreeDSRequest", "exemptThreeDSPayment", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deviceGuid"]) -> typing.Union[MetaOapg.properties.deviceGuid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["redirectUrl"]) -> typing.Union[MetaOapg.properties.redirectUrl, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["redirectUrlRequestPayload"]) -> typing.Union[MetaOapg.properties.redirectUrlRequestPayload, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union[MetaOapg.properties.card, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["exemptThreeDSRequest"]) -> typing.Union[MetaOapg.properties.exemptThreeDSRequest, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["exemptThreeDSPayment"]) -> typing.Union[MetaOapg.properties.exemptThreeDSPayment, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "guid", "status", "timeStamp", "deviceGuid", "amount", "redirectUrl", "redirectUrlRequestPayload", "card", "exemptThreeDSRequest", "exemptThreeDSPayment", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
                guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
                deviceGuid: typing.Union[MetaOapg.properties.deviceGuid, str, schemas.Unset] = schemas.unset,
                amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                redirectUrl: typing.Union[MetaOapg.properties.redirectUrl, str, schemas.Unset] = schemas.unset,
                redirectUrlRequestPayload: typing.Union[MetaOapg.properties.redirectUrlRequestPayload, str, schemas.Unset] = schemas.unset,
                card: typing.Union[MetaOapg.properties.card, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                exemptThreeDSRequest: typing.Union[MetaOapg.properties.exemptThreeDSRequest, bool, schemas.Unset] = schemas.unset,
                exemptThreeDSPayment: typing.Union[MetaOapg.properties.exemptThreeDSPayment, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *args,
                    version=version,
                    guid=guid,
                    status=status,
                    timeStamp=timeStamp,
                    deviceGuid=deviceGuid,
                    amount=amount,
                    redirectUrl=redirectUrl,
                    redirectUrlRequestPayload=redirectUrlRequestPayload,
                    card=card,
                    exemptThreeDSRequest=exemptThreeDSRequest,
                    exemptThreeDSPayment=exemptThreeDSPayment,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class one_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    version = schemas.StrSchema
                    guid = schemas.StrSchema
                    status = schemas.StrSchema
                    timeStamp = schemas.StrSchema
                    deviceGuid = schemas.StrSchema
                    amount = schemas.NumberSchema
                    threeDSStatus = schemas.StrSchema
                    directoryServerTransactionID = schemas.StrSchema
                    acsTransactionId = schemas.StrSchema
                    redirectUrl = schemas.StrSchema
                    
                    
                    class card(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                first6 = schemas.StrSchema
                                first4 = schemas.StrSchema
                                last4 = schemas.StrSchema
                                cardHolderName = schemas.StrSchema
                                cardType = schemas.StrSchema
                                expirationDate = schemas.StrSchema
                                guid = schemas.StrSchema
                                __annotations__ = {
                                    "first6": first6,
                                    "first4": first4,
                                    "last4": last4,
                                    "cardHolderName": cardHolderName,
                                    "cardType": cardType,
                                    "expirationDate": expirationDate,
                                    "guid": guid,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["first6"]) -> MetaOapg.properties.first6: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["first4"]) -> MetaOapg.properties.first4: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["last4"]) -> MetaOapg.properties.last4: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardHolderName"]) -> MetaOapg.properties.cardHolderName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardType"]) -> MetaOapg.properties.cardType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["first6", "first4", "last4", "cardHolderName", "cardType", "expirationDate", "guid", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["first6"]) -> typing.Union[MetaOapg.properties.first6, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["first4"]) -> typing.Union[MetaOapg.properties.first4, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["last4"]) -> typing.Union[MetaOapg.properties.last4, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardHolderName"]) -> typing.Union[MetaOapg.properties.cardHolderName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardType"]) -> typing.Union[MetaOapg.properties.cardType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first6", "first4", "last4", "cardHolderName", "cardType", "expirationDate", "guid", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            first6: typing.Union[MetaOapg.properties.first6, str, schemas.Unset] = schemas.unset,
                            first4: typing.Union[MetaOapg.properties.first4, str, schemas.Unset] = schemas.unset,
                            last4: typing.Union[MetaOapg.properties.last4, str, schemas.Unset] = schemas.unset,
                            cardHolderName: typing.Union[MetaOapg.properties.cardHolderName, str, schemas.Unset] = schemas.unset,
                            cardType: typing.Union[MetaOapg.properties.cardType, str, schemas.Unset] = schemas.unset,
                            expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, schemas.Unset] = schemas.unset,
                            guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'card':
                            return super().__new__(
                                cls,
                                *args,
                                first6=first6,
                                first4=first4,
                                last4=last4,
                                cardHolderName=cardHolderName,
                                cardType=cardType,
                                expirationDate=expirationDate,
                                guid=guid,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    exemptThreeDSRequest = schemas.BoolSchema
                    exemptThreeDSPayment = schemas.BoolSchema
                    __annotations__ = {
                        "version": version,
                        "guid": guid,
                        "status": status,
                        "timeStamp": timeStamp,
                        "deviceGuid": deviceGuid,
                        "amount": amount,
                        "threeDSStatus": threeDSStatus,
                        "directoryServerTransactionID": directoryServerTransactionID,
                        "acsTransactionId": acsTransactionId,
                        "redirectUrl": redirectUrl,
                        "card": card,
                        "exemptThreeDSRequest": exemptThreeDSRequest,
                        "exemptThreeDSPayment": exemptThreeDSPayment,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deviceGuid"]) -> MetaOapg.properties.deviceGuid: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["threeDSStatus"]) -> MetaOapg.properties.threeDSStatus: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["directoryServerTransactionID"]) -> MetaOapg.properties.directoryServerTransactionID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["acsTransactionId"]) -> MetaOapg.properties.acsTransactionId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["card"]) -> MetaOapg.properties.card: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["exemptThreeDSRequest"]) -> MetaOapg.properties.exemptThreeDSRequest: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["exemptThreeDSPayment"]) -> MetaOapg.properties.exemptThreeDSPayment: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "guid", "status", "timeStamp", "deviceGuid", "amount", "threeDSStatus", "directoryServerTransactionID", "acsTransactionId", "redirectUrl", "card", "exemptThreeDSRequest", "exemptThreeDSPayment", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deviceGuid"]) -> typing.Union[MetaOapg.properties.deviceGuid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["threeDSStatus"]) -> typing.Union[MetaOapg.properties.threeDSStatus, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["directoryServerTransactionID"]) -> typing.Union[MetaOapg.properties.directoryServerTransactionID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["acsTransactionId"]) -> typing.Union[MetaOapg.properties.acsTransactionId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["redirectUrl"]) -> typing.Union[MetaOapg.properties.redirectUrl, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union[MetaOapg.properties.card, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["exemptThreeDSRequest"]) -> typing.Union[MetaOapg.properties.exemptThreeDSRequest, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["exemptThreeDSPayment"]) -> typing.Union[MetaOapg.properties.exemptThreeDSPayment, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "guid", "status", "timeStamp", "deviceGuid", "amount", "threeDSStatus", "directoryServerTransactionID", "acsTransactionId", "redirectUrl", "card", "exemptThreeDSRequest", "exemptThreeDSPayment", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
                guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
                status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
                deviceGuid: typing.Union[MetaOapg.properties.deviceGuid, str, schemas.Unset] = schemas.unset,
                amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                threeDSStatus: typing.Union[MetaOapg.properties.threeDSStatus, str, schemas.Unset] = schemas.unset,
                directoryServerTransactionID: typing.Union[MetaOapg.properties.directoryServerTransactionID, str, schemas.Unset] = schemas.unset,
                acsTransactionId: typing.Union[MetaOapg.properties.acsTransactionId, str, schemas.Unset] = schemas.unset,
                redirectUrl: typing.Union[MetaOapg.properties.redirectUrl, str, schemas.Unset] = schemas.unset,
                card: typing.Union[MetaOapg.properties.card, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                exemptThreeDSRequest: typing.Union[MetaOapg.properties.exemptThreeDSRequest, bool, schemas.Unset] = schemas.unset,
                exemptThreeDSPayment: typing.Union[MetaOapg.properties.exemptThreeDSPayment, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    *args,
                    version=version,
                    guid=guid,
                    status=status,
                    timeStamp=timeStamp,
                    deviceGuid=deviceGuid,
                    amount=amount,
                    threeDSStatus=threeDSStatus,
                    directoryServerTransactionID=directoryServerTransactionID,
                    acsTransactionId=acsTransactionId,
                    redirectUrl=redirectUrl,
                    card=card,
                    exemptThreeDSRequest=exemptThreeDSRequest,
                    exemptThreeDSPayment=exemptThreeDSPayment,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SaleCreateTransaction202Response':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
