# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class DtoPayout(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            payoutGuid = schemas.UUIDSchema
            payoutReferenceToken = schemas.StrSchema
            memo = schemas.StrSchema
            orderNumber = schemas.StrSchema
            associationId = schemas.StrSchema
            customerId = schemas.StrSchema
            createdDate = schemas.DateTimeSchema
            createdBy = schemas.StrSchema
        
            @staticmethod
            def labelIds() -> typing.Type['DtoPayoutLabelIds']:
                return DtoPayoutLabelIds
            
            
            class payments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DtoPayments']:
                        return DtoPayments
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DtoPayments'], typing.List['DtoPayments']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DtoPayments':
                    return super().__getitem__(i)
            __annotations__ = {
                "payoutGuid": payoutGuid,
                "payoutReferenceToken": payoutReferenceToken,
                "memo": memo,
                "orderNumber": orderNumber,
                "associationId": associationId,
                "customerId": customerId,
                "createdDate": createdDate,
                "createdBy": createdBy,
                "labelIds": labelIds,
                "payments": payments,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payoutGuid"]) -> MetaOapg.properties.payoutGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payoutReferenceToken"]) -> MetaOapg.properties.payoutReferenceToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderNumber"]) -> MetaOapg.properties.orderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associationId"]) -> MetaOapg.properties.associationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelIds"]) -> 'DtoPayoutLabelIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payments"]) -> MetaOapg.properties.payments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payoutGuid", "payoutReferenceToken", "memo", "orderNumber", "associationId", "customerId", "createdDate", "createdBy", "labelIds", "payments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payoutGuid"]) -> typing.Union[MetaOapg.properties.payoutGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payoutReferenceToken"]) -> typing.Union[MetaOapg.properties.payoutReferenceToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderNumber"]) -> typing.Union[MetaOapg.properties.orderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associationId"]) -> typing.Union[MetaOapg.properties.associationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> typing.Union[MetaOapg.properties.createdDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelIds"]) -> typing.Union['DtoPayoutLabelIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payments"]) -> typing.Union[MetaOapg.properties.payments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payoutGuid", "payoutReferenceToken", "memo", "orderNumber", "associationId", "customerId", "createdDate", "createdBy", "labelIds", "payments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        payoutGuid: typing.Union[MetaOapg.properties.payoutGuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        payoutReferenceToken: typing.Union[MetaOapg.properties.payoutReferenceToken, str, schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, str, schemas.Unset] = schemas.unset,
        orderNumber: typing.Union[MetaOapg.properties.orderNumber, str, schemas.Unset] = schemas.unset,
        associationId: typing.Union[MetaOapg.properties.associationId, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, str, schemas.Unset] = schemas.unset,
        createdDate: typing.Union[MetaOapg.properties.createdDate, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        labelIds: typing.Union['DtoPayoutLabelIds', schemas.Unset] = schemas.unset,
        payments: typing.Union[MetaOapg.properties.payments, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DtoPayout':
        return super().__new__(
            cls,
            *args,
            payoutGuid=payoutGuid,
            payoutReferenceToken=payoutReferenceToken,
            memo=memo,
            orderNumber=orderNumber,
            associationId=associationId,
            customerId=customerId,
            createdDate=createdDate,
            createdBy=createdBy,
            labelIds=labelIds,
            payments=payments,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.dto_payments import DtoPayments
from connex_pay_python_sdk.model.dto_payout_label_ids import DtoPayoutLabelIds
