# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SaleSearchSalesRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            MerchantGuid = schemas.StrSchema
            AmountFrom = schemas.Float32Schema
            AmountTo = schemas.Float32Schema
            CardHolderName = schemas.StrSchema
            CardLastFour = schemas.StrSchema
            CardType = schemas.StrSchema
            InvoiceNumber = schemas.Int32Schema
            OrderNumber = schemas.StrSchema
            OrderDateFrom = schemas.DateSchema
            OrderDateTo = schemas.DateSchema
            TimeStampFrom = schemas.DateSchema
            TimeStampTo = schemas.DateSchema
            Status = schemas.StrSchema
            MerchantCustomerId = schemas.StrSchema
            Activated = schemas.BoolSchema
            ActivationDateFrom = schemas.DateSchema
            ActivationDateTo = schemas.DateSchema
            __annotations__ = {
                "MerchantGuid": MerchantGuid,
                "AmountFrom": AmountFrom,
                "AmountTo": AmountTo,
                "CardHolderName": CardHolderName,
                "CardLastFour": CardLastFour,
                "CardType": CardType,
                "InvoiceNumber": InvoiceNumber,
                "OrderNumber": OrderNumber,
                "OrderDateFrom": OrderDateFrom,
                "OrderDateTo": OrderDateTo,
                "TimeStampFrom": TimeStampFrom,
                "TimeStampTo": TimeStampTo,
                "Status": Status,
                "MerchantCustomerId": MerchantCustomerId,
                "Activated": Activated,
                "ActivationDateFrom": ActivationDateFrom,
                "ActivationDateTo": ActivationDateTo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MerchantGuid"]) -> MetaOapg.properties.MerchantGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AmountFrom"]) -> MetaOapg.properties.AmountFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AmountTo"]) -> MetaOapg.properties.AmountTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardHolderName"]) -> MetaOapg.properties.CardHolderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardLastFour"]) -> MetaOapg.properties.CardLastFour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardType"]) -> MetaOapg.properties.CardType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InvoiceNumber"]) -> MetaOapg.properties.InvoiceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderNumber"]) -> MetaOapg.properties.OrderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderDateFrom"]) -> MetaOapg.properties.OrderDateFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderDateTo"]) -> MetaOapg.properties.OrderDateTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TimeStampFrom"]) -> MetaOapg.properties.TimeStampFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TimeStampTo"]) -> MetaOapg.properties.TimeStampTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MerchantCustomerId"]) -> MetaOapg.properties.MerchantCustomerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Activated"]) -> MetaOapg.properties.Activated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActivationDateFrom"]) -> MetaOapg.properties.ActivationDateFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActivationDateTo"]) -> MetaOapg.properties.ActivationDateTo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["MerchantGuid", "AmountFrom", "AmountTo", "CardHolderName", "CardLastFour", "CardType", "InvoiceNumber", "OrderNumber", "OrderDateFrom", "OrderDateTo", "TimeStampFrom", "TimeStampTo", "Status", "MerchantCustomerId", "Activated", "ActivationDateFrom", "ActivationDateTo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MerchantGuid"]) -> typing.Union[MetaOapg.properties.MerchantGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AmountFrom"]) -> typing.Union[MetaOapg.properties.AmountFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AmountTo"]) -> typing.Union[MetaOapg.properties.AmountTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardHolderName"]) -> typing.Union[MetaOapg.properties.CardHolderName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardLastFour"]) -> typing.Union[MetaOapg.properties.CardLastFour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardType"]) -> typing.Union[MetaOapg.properties.CardType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InvoiceNumber"]) -> typing.Union[MetaOapg.properties.InvoiceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderNumber"]) -> typing.Union[MetaOapg.properties.OrderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderDateFrom"]) -> typing.Union[MetaOapg.properties.OrderDateFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderDateTo"]) -> typing.Union[MetaOapg.properties.OrderDateTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TimeStampFrom"]) -> typing.Union[MetaOapg.properties.TimeStampFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TimeStampTo"]) -> typing.Union[MetaOapg.properties.TimeStampTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MerchantCustomerId"]) -> typing.Union[MetaOapg.properties.MerchantCustomerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Activated"]) -> typing.Union[MetaOapg.properties.Activated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActivationDateFrom"]) -> typing.Union[MetaOapg.properties.ActivationDateFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActivationDateTo"]) -> typing.Union[MetaOapg.properties.ActivationDateTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MerchantGuid", "AmountFrom", "AmountTo", "CardHolderName", "CardLastFour", "CardType", "InvoiceNumber", "OrderNumber", "OrderDateFrom", "OrderDateTo", "TimeStampFrom", "TimeStampTo", "Status", "MerchantCustomerId", "Activated", "ActivationDateFrom", "ActivationDateTo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        MerchantGuid: typing.Union[MetaOapg.properties.MerchantGuid, str, schemas.Unset] = schemas.unset,
        AmountFrom: typing.Union[MetaOapg.properties.AmountFrom, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        AmountTo: typing.Union[MetaOapg.properties.AmountTo, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CardHolderName: typing.Union[MetaOapg.properties.CardHolderName, str, schemas.Unset] = schemas.unset,
        CardLastFour: typing.Union[MetaOapg.properties.CardLastFour, str, schemas.Unset] = schemas.unset,
        CardType: typing.Union[MetaOapg.properties.CardType, str, schemas.Unset] = schemas.unset,
        InvoiceNumber: typing.Union[MetaOapg.properties.InvoiceNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        OrderNumber: typing.Union[MetaOapg.properties.OrderNumber, str, schemas.Unset] = schemas.unset,
        OrderDateFrom: typing.Union[MetaOapg.properties.OrderDateFrom, str, date, schemas.Unset] = schemas.unset,
        OrderDateTo: typing.Union[MetaOapg.properties.OrderDateTo, str, date, schemas.Unset] = schemas.unset,
        TimeStampFrom: typing.Union[MetaOapg.properties.TimeStampFrom, str, date, schemas.Unset] = schemas.unset,
        TimeStampTo: typing.Union[MetaOapg.properties.TimeStampTo, str, date, schemas.Unset] = schemas.unset,
        Status: typing.Union[MetaOapg.properties.Status, str, schemas.Unset] = schemas.unset,
        MerchantCustomerId: typing.Union[MetaOapg.properties.MerchantCustomerId, str, schemas.Unset] = schemas.unset,
        Activated: typing.Union[MetaOapg.properties.Activated, bool, schemas.Unset] = schemas.unset,
        ActivationDateFrom: typing.Union[MetaOapg.properties.ActivationDateFrom, str, date, schemas.Unset] = schemas.unset,
        ActivationDateTo: typing.Union[MetaOapg.properties.ActivationDateTo, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SaleSearchSalesRequest':
        return super().__new__(
            cls,
            *args,
            MerchantGuid=MerchantGuid,
            AmountFrom=AmountFrom,
            AmountTo=AmountTo,
            CardHolderName=CardHolderName,
            CardLastFour=CardLastFour,
            CardType=CardType,
            InvoiceNumber=InvoiceNumber,
            OrderNumber=OrderNumber,
            OrderDateFrom=OrderDateFrom,
            OrderDateTo=OrderDateTo,
            TimeStampFrom=TimeStampFrom,
            TimeStampTo=TimeStampTo,
            Status=Status,
            MerchantCustomerId=MerchantCustomerId,
            Activated=Activated,
            ActivationDateFrom=ActivationDateFrom,
            ActivationDateTo=ActivationDateTo,
            _configuration=_configuration,
            **kwargs,
        )
