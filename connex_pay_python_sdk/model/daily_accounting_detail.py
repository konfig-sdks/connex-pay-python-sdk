# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class DailyAccountingDetail(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            merchantGuid = schemas.UUIDSchema
            
            
            class clientName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            releasedDate = schemas.DateSchema
            
            
            class orderNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class cardLastFour(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cardLastFour':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class incomingTransactionCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'incomingTransactionCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class customerId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customerId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            amount = schemas.Float64Schema
            
            
            class merchantName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'merchantName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ticketNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ticketNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class entityGuid(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entityGuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class purchaseType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'purchaseType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class entityId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entityId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            issuedAmount = schemas.Float64Schema
            
            
            class labelName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labelName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class associationId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associationId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class saleGuid(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'saleGuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class cardGuid(
                schemas.UUIDBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uuid'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, uuid.UUID, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cardGuid':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateTime(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateTime':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "description": description,
                "merchantGuid": merchantGuid,
                "clientName": clientName,
                "releasedDate": releasedDate,
                "orderNumber": orderNumber,
                "name": name,
                "cardLastFour": cardLastFour,
                "incomingTransactionCode": incomingTransactionCode,
                "customerId": customerId,
                "amount": amount,
                "merchantName": merchantName,
                "ticketNumber": ticketNumber,
                "entityGuid": entityGuid,
                "purchaseType": purchaseType,
                "entityId": entityId,
                "issuedAmount": issuedAmount,
                "labelName": labelName,
                "associationId": associationId,
                "saleGuid": saleGuid,
                "cardGuid": cardGuid,
                "dateTime": dateTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantGuid"]) -> MetaOapg.properties.merchantGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientName"]) -> MetaOapg.properties.clientName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releasedDate"]) -> MetaOapg.properties.releasedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderNumber"]) -> MetaOapg.properties.orderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardLastFour"]) -> MetaOapg.properties.cardLastFour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomingTransactionCode"]) -> MetaOapg.properties.incomingTransactionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantName"]) -> MetaOapg.properties.merchantName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticketNumber"]) -> MetaOapg.properties.ticketNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityGuid"]) -> MetaOapg.properties.entityGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchaseType"]) -> MetaOapg.properties.purchaseType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> MetaOapg.properties.entityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuedAmount"]) -> MetaOapg.properties.issuedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelName"]) -> MetaOapg.properties.labelName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associationId"]) -> MetaOapg.properties.associationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["saleGuid"]) -> MetaOapg.properties.saleGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardGuid"]) -> MetaOapg.properties.cardGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTime"]) -> MetaOapg.properties.dateTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "merchantGuid", "clientName", "releasedDate", "orderNumber", "name", "cardLastFour", "incomingTransactionCode", "customerId", "amount", "merchantName", "ticketNumber", "entityGuid", "purchaseType", "entityId", "issuedAmount", "labelName", "associationId", "saleGuid", "cardGuid", "dateTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantGuid"]) -> typing.Union[MetaOapg.properties.merchantGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientName"]) -> typing.Union[MetaOapg.properties.clientName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releasedDate"]) -> typing.Union[MetaOapg.properties.releasedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderNumber"]) -> typing.Union[MetaOapg.properties.orderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardLastFour"]) -> typing.Union[MetaOapg.properties.cardLastFour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomingTransactionCode"]) -> typing.Union[MetaOapg.properties.incomingTransactionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantName"]) -> typing.Union[MetaOapg.properties.merchantName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticketNumber"]) -> typing.Union[MetaOapg.properties.ticketNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityGuid"]) -> typing.Union[MetaOapg.properties.entityGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchaseType"]) -> typing.Union[MetaOapg.properties.purchaseType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> typing.Union[MetaOapg.properties.entityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuedAmount"]) -> typing.Union[MetaOapg.properties.issuedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelName"]) -> typing.Union[MetaOapg.properties.labelName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associationId"]) -> typing.Union[MetaOapg.properties.associationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["saleGuid"]) -> typing.Union[MetaOapg.properties.saleGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardGuid"]) -> typing.Union[MetaOapg.properties.cardGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTime"]) -> typing.Union[MetaOapg.properties.dateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "merchantGuid", "clientName", "releasedDate", "orderNumber", "name", "cardLastFour", "incomingTransactionCode", "customerId", "amount", "merchantName", "ticketNumber", "entityGuid", "purchaseType", "entityId", "issuedAmount", "labelName", "associationId", "saleGuid", "cardGuid", "dateTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        merchantGuid: typing.Union[MetaOapg.properties.merchantGuid, str, uuid.UUID, schemas.Unset] = schemas.unset,
        clientName: typing.Union[MetaOapg.properties.clientName, None, str, schemas.Unset] = schemas.unset,
        releasedDate: typing.Union[MetaOapg.properties.releasedDate, str, date, schemas.Unset] = schemas.unset,
        orderNumber: typing.Union[MetaOapg.properties.orderNumber, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        cardLastFour: typing.Union[MetaOapg.properties.cardLastFour, None, str, schemas.Unset] = schemas.unset,
        incomingTransactionCode: typing.Union[MetaOapg.properties.incomingTransactionCode, None, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, None, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        merchantName: typing.Union[MetaOapg.properties.merchantName, None, str, schemas.Unset] = schemas.unset,
        ticketNumber: typing.Union[MetaOapg.properties.ticketNumber, None, str, schemas.Unset] = schemas.unset,
        entityGuid: typing.Union[MetaOapg.properties.entityGuid, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        purchaseType: typing.Union[MetaOapg.properties.purchaseType, None, str, schemas.Unset] = schemas.unset,
        entityId: typing.Union[MetaOapg.properties.entityId, None, str, schemas.Unset] = schemas.unset,
        issuedAmount: typing.Union[MetaOapg.properties.issuedAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        labelName: typing.Union[MetaOapg.properties.labelName, None, str, schemas.Unset] = schemas.unset,
        associationId: typing.Union[MetaOapg.properties.associationId, None, str, schemas.Unset] = schemas.unset,
        saleGuid: typing.Union[MetaOapg.properties.saleGuid, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        cardGuid: typing.Union[MetaOapg.properties.cardGuid, None, str, uuid.UUID, schemas.Unset] = schemas.unset,
        dateTime: typing.Union[MetaOapg.properties.dateTime, None, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DailyAccountingDetail':
        return super().__new__(
            cls,
            *args,
            description=description,
            merchantGuid=merchantGuid,
            clientName=clientName,
            releasedDate=releasedDate,
            orderNumber=orderNumber,
            name=name,
            cardLastFour=cardLastFour,
            incomingTransactionCode=incomingTransactionCode,
            customerId=customerId,
            amount=amount,
            merchantName=merchantName,
            ticketNumber=ticketNumber,
            entityGuid=entityGuid,
            purchaseType=purchaseType,
            entityId=entityId,
            issuedAmount=issuedAmount,
            labelName=labelName,
            associationId=associationId,
            saleGuid=saleGuid,
            cardGuid=cardGuid,
            dateTime=dateTime,
            _configuration=_configuration,
            **kwargs,
        )
