# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SettingTokenizeBankAccountInfoResponseAccountHolder(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            accountHolderGuid = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            _businessName = schemas.StrSchema
            email = schemas.StrSchema
            phone = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['SettingTokenizeBankAccountInfoResponseAccountHolderAddress']:
                return SettingTokenizeBankAccountInfoResponseAccountHolderAddress
        
            @staticmethod
            def bankAccount() -> typing.Type['SettingTokenizeBankAccountInfoResponseAccountHolderBankAccount']:
                return SettingTokenizeBankAccountInfoResponseAccountHolderBankAccount
            __annotations__ = {
                "accountHolderGuid": accountHolderGuid,
                "firstName": firstName,
                "lastName": lastName,
                "_businessName": _businessName,
                "email": email,
                "phone": phone,
                "address": address,
                "bankAccount": bankAccount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountHolderGuid"]) -> MetaOapg.properties.accountHolderGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_businessName"]) -> MetaOapg.properties._businessName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'SettingTokenizeBankAccountInfoResponseAccountHolderAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccount"]) -> 'SettingTokenizeBankAccountInfoResponseAccountHolderBankAccount': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountHolderGuid", "firstName", "lastName", "_businessName", "email", "phone", "address", "bankAccount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountHolderGuid"]) -> typing.Union[MetaOapg.properties.accountHolderGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_businessName"]) -> typing.Union[MetaOapg.properties._businessName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['SettingTokenizeBankAccountInfoResponseAccountHolderAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccount"]) -> typing.Union['SettingTokenizeBankAccountInfoResponseAccountHolderBankAccount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountHolderGuid", "firstName", "lastName", "_businessName", "email", "phone", "address", "bankAccount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountHolderGuid: typing.Union[MetaOapg.properties.accountHolderGuid, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        _businessName: typing.Union[MetaOapg.properties._businessName, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
        address: typing.Union['SettingTokenizeBankAccountInfoResponseAccountHolderAddress', schemas.Unset] = schemas.unset,
        bankAccount: typing.Union['SettingTokenizeBankAccountInfoResponseAccountHolderBankAccount', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SettingTokenizeBankAccountInfoResponseAccountHolder':
        return super().__new__(
            cls,
            *args,
            accountHolderGuid=accountHolderGuid,
            firstName=firstName,
            lastName=lastName,
            _businessName=_businessName,
            email=email,
            phone=phone,
            address=address,
            bankAccount=bankAccount,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.setting_tokenize_bank_account_info_response_account_holder_address import SettingTokenizeBankAccountInfoResponseAccountHolderAddress
from connex_pay_python_sdk.model.setting_tokenize_bank_account_info_response_account_holder_bank_account import SettingTokenizeBankAccountInfoResponseAccountHolderBankAccount
