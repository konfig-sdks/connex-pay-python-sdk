# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SaleCreateTransactionRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ConnexPayTransaction",
            "DeviceGuid",
            "Amount",
            "RiskData",
        }
        
        class properties:
            DeviceGuid = schemas.StrSchema
            Amount = schemas.Float32Schema
        
            @staticmethod
            def ConnexPayTransaction() -> typing.Type['SaleCreateTransactionRequestConnexPayTransaction']:
                return SaleCreateTransactionRequestConnexPayTransaction
        
            @staticmethod
            def RiskData() -> typing.Type['SaleCreateTransactionRequestRiskData']:
                return SaleCreateTransactionRequestRiskData
            TenderType = schemas.StrSchema
            SequenceNumber = schemas.StrSchema
            OrderNumber = schemas.StrSchema
            SendReceipt = schemas.BoolSchema
            RiskProcessingOnly = schemas.BoolSchema
            StatementDescription = schemas.StrSchema
            CustomerID = schemas.StrSchema
            ActivationDate = schemas.DateSchema
            RequestIp = schemas.StrSchema
        
            @staticmethod
            def Card() -> typing.Type['SaleCreateTransactionRequestCard']:
                return SaleCreateTransactionRequestCard
        
            @staticmethod
            def BankAccount() -> typing.Type['SaleCreateTransactionRequestBankAccount']:
                return SaleCreateTransactionRequestBankAccount
        
            @staticmethod
            def Customer() -> typing.Type['SaleCreateTransactionRequestCustomer']:
                return SaleCreateTransactionRequestCustomer
        
            @staticmethod
            def EnhancedData() -> typing.Type['SaleCreateTransactionRequestEnhancedData']:
                return SaleCreateTransactionRequestEnhancedData
            AssociationId = schemas.StrSchema
        
            @staticmethod
            def CustomParameters() -> typing.Type['SaleCreateTransactionRequestCustomParameters']:
                return SaleCreateTransactionRequestCustomParameters
        
            @staticmethod
            def LabelIDs() -> typing.Type['SaleCreateTransactionRequestLabelIDs']:
                return SaleCreateTransactionRequestLabelIDs
        
            @staticmethod
            def BrowserData() -> typing.Type['SaleCreateTransactionRequestBrowserData']:
                return SaleCreateTransactionRequestBrowserData
            __annotations__ = {
                "DeviceGuid": DeviceGuid,
                "Amount": Amount,
                "ConnexPayTransaction": ConnexPayTransaction,
                "RiskData": RiskData,
                "TenderType": TenderType,
                "SequenceNumber": SequenceNumber,
                "OrderNumber": OrderNumber,
                "SendReceipt": SendReceipt,
                "RiskProcessingOnly": RiskProcessingOnly,
                "StatementDescription": StatementDescription,
                "CustomerID": CustomerID,
                "ActivationDate": ActivationDate,
                "RequestIp": RequestIp,
                "Card": Card,
                "BankAccount": BankAccount,
                "Customer": Customer,
                "EnhancedData": EnhancedData,
                "AssociationId": AssociationId,
                "CustomParameters": CustomParameters,
                "LabelIDs": LabelIDs,
                "BrowserData": BrowserData,
            }
    
    ConnexPayTransaction: 'SaleCreateTransactionRequestConnexPayTransaction'
    DeviceGuid: MetaOapg.properties.DeviceGuid
    Amount: MetaOapg.properties.Amount
    RiskData: 'SaleCreateTransactionRequestRiskData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> MetaOapg.properties.Amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConnexPayTransaction"]) -> 'SaleCreateTransactionRequestConnexPayTransaction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RiskData"]) -> 'SaleCreateTransactionRequestRiskData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TenderType"]) -> MetaOapg.properties.TenderType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SequenceNumber"]) -> MetaOapg.properties.SequenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderNumber"]) -> MetaOapg.properties.OrderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SendReceipt"]) -> MetaOapg.properties.SendReceipt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RiskProcessingOnly"]) -> MetaOapg.properties.RiskProcessingOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StatementDescription"]) -> MetaOapg.properties.StatementDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CustomerID"]) -> MetaOapg.properties.CustomerID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActivationDate"]) -> MetaOapg.properties.ActivationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequestIp"]) -> MetaOapg.properties.RequestIp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Card"]) -> 'SaleCreateTransactionRequestCard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BankAccount"]) -> 'SaleCreateTransactionRequestBankAccount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Customer"]) -> 'SaleCreateTransactionRequestCustomer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EnhancedData"]) -> 'SaleCreateTransactionRequestEnhancedData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssociationId"]) -> MetaOapg.properties.AssociationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CustomParameters"]) -> 'SaleCreateTransactionRequestCustomParameters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LabelIDs"]) -> 'SaleCreateTransactionRequestLabelIDs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BrowserData"]) -> 'SaleCreateTransactionRequestBrowserData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "Amount", "ConnexPayTransaction", "RiskData", "TenderType", "SequenceNumber", "OrderNumber", "SendReceipt", "RiskProcessingOnly", "StatementDescription", "CustomerID", "ActivationDate", "RequestIp", "Card", "BankAccount", "Customer", "EnhancedData", "AssociationId", "CustomParameters", "LabelIDs", "BrowserData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> MetaOapg.properties.Amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConnexPayTransaction"]) -> 'SaleCreateTransactionRequestConnexPayTransaction': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RiskData"]) -> 'SaleCreateTransactionRequestRiskData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TenderType"]) -> typing.Union[MetaOapg.properties.TenderType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SequenceNumber"]) -> typing.Union[MetaOapg.properties.SequenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderNumber"]) -> typing.Union[MetaOapg.properties.OrderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SendReceipt"]) -> typing.Union[MetaOapg.properties.SendReceipt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RiskProcessingOnly"]) -> typing.Union[MetaOapg.properties.RiskProcessingOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StatementDescription"]) -> typing.Union[MetaOapg.properties.StatementDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CustomerID"]) -> typing.Union[MetaOapg.properties.CustomerID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActivationDate"]) -> typing.Union[MetaOapg.properties.ActivationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequestIp"]) -> typing.Union[MetaOapg.properties.RequestIp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Card"]) -> typing.Union['SaleCreateTransactionRequestCard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BankAccount"]) -> typing.Union['SaleCreateTransactionRequestBankAccount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Customer"]) -> typing.Union['SaleCreateTransactionRequestCustomer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EnhancedData"]) -> typing.Union['SaleCreateTransactionRequestEnhancedData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssociationId"]) -> typing.Union[MetaOapg.properties.AssociationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CustomParameters"]) -> typing.Union['SaleCreateTransactionRequestCustomParameters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LabelIDs"]) -> typing.Union['SaleCreateTransactionRequestLabelIDs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BrowserData"]) -> typing.Union['SaleCreateTransactionRequestBrowserData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "Amount", "ConnexPayTransaction", "RiskData", "TenderType", "SequenceNumber", "OrderNumber", "SendReceipt", "RiskProcessingOnly", "StatementDescription", "CustomerID", "ActivationDate", "RequestIp", "Card", "BankAccount", "Customer", "EnhancedData", "AssociationId", "CustomParameters", "LabelIDs", "BrowserData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ConnexPayTransaction: 'SaleCreateTransactionRequestConnexPayTransaction',
        DeviceGuid: typing.Union[MetaOapg.properties.DeviceGuid, str, ],
        Amount: typing.Union[MetaOapg.properties.Amount, decimal.Decimal, int, float, ],
        RiskData: 'SaleCreateTransactionRequestRiskData',
        TenderType: typing.Union[MetaOapg.properties.TenderType, str, schemas.Unset] = schemas.unset,
        SequenceNumber: typing.Union[MetaOapg.properties.SequenceNumber, str, schemas.Unset] = schemas.unset,
        OrderNumber: typing.Union[MetaOapg.properties.OrderNumber, str, schemas.Unset] = schemas.unset,
        SendReceipt: typing.Union[MetaOapg.properties.SendReceipt, bool, schemas.Unset] = schemas.unset,
        RiskProcessingOnly: typing.Union[MetaOapg.properties.RiskProcessingOnly, bool, schemas.Unset] = schemas.unset,
        StatementDescription: typing.Union[MetaOapg.properties.StatementDescription, str, schemas.Unset] = schemas.unset,
        CustomerID: typing.Union[MetaOapg.properties.CustomerID, str, schemas.Unset] = schemas.unset,
        ActivationDate: typing.Union[MetaOapg.properties.ActivationDate, str, date, schemas.Unset] = schemas.unset,
        RequestIp: typing.Union[MetaOapg.properties.RequestIp, str, schemas.Unset] = schemas.unset,
        Card: typing.Union['SaleCreateTransactionRequestCard', schemas.Unset] = schemas.unset,
        BankAccount: typing.Union['SaleCreateTransactionRequestBankAccount', schemas.Unset] = schemas.unset,
        Customer: typing.Union['SaleCreateTransactionRequestCustomer', schemas.Unset] = schemas.unset,
        EnhancedData: typing.Union['SaleCreateTransactionRequestEnhancedData', schemas.Unset] = schemas.unset,
        AssociationId: typing.Union[MetaOapg.properties.AssociationId, str, schemas.Unset] = schemas.unset,
        CustomParameters: typing.Union['SaleCreateTransactionRequestCustomParameters', schemas.Unset] = schemas.unset,
        LabelIDs: typing.Union['SaleCreateTransactionRequestLabelIDs', schemas.Unset] = schemas.unset,
        BrowserData: typing.Union['SaleCreateTransactionRequestBrowserData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SaleCreateTransactionRequest':
        return super().__new__(
            cls,
            *args,
            ConnexPayTransaction=ConnexPayTransaction,
            DeviceGuid=DeviceGuid,
            Amount=Amount,
            RiskData=RiskData,
            TenderType=TenderType,
            SequenceNumber=SequenceNumber,
            OrderNumber=OrderNumber,
            SendReceipt=SendReceipt,
            RiskProcessingOnly=RiskProcessingOnly,
            StatementDescription=StatementDescription,
            CustomerID=CustomerID,
            ActivationDate=ActivationDate,
            RequestIp=RequestIp,
            Card=Card,
            BankAccount=BankAccount,
            Customer=Customer,
            EnhancedData=EnhancedData,
            AssociationId=AssociationId,
            CustomParameters=CustomParameters,
            LabelIDs=LabelIDs,
            BrowserData=BrowserData,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.sale_create_transaction_request_bank_account import SaleCreateTransactionRequestBankAccount
from connex_pay_python_sdk.model.sale_create_transaction_request_browser_data import SaleCreateTransactionRequestBrowserData
from connex_pay_python_sdk.model.sale_create_transaction_request_card import SaleCreateTransactionRequestCard
from connex_pay_python_sdk.model.sale_create_transaction_request_connex_pay_transaction import SaleCreateTransactionRequestConnexPayTransaction
from connex_pay_python_sdk.model.sale_create_transaction_request_custom_parameters import SaleCreateTransactionRequestCustomParameters
from connex_pay_python_sdk.model.sale_create_transaction_request_customer import SaleCreateTransactionRequestCustomer
from connex_pay_python_sdk.model.sale_create_transaction_request_enhanced_data import SaleCreateTransactionRequestEnhancedData
from connex_pay_python_sdk.model.sale_create_transaction_request_label_ids import SaleCreateTransactionRequestLabelIDs
from connex_pay_python_sdk.model.sale_create_transaction_request_risk_data import SaleCreateTransactionRequestRiskData
