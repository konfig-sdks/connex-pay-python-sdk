# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SaleCreateTransactionRequestCardThreeDs(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    ThreeDS object is required when 3DS authentication parameters are being passed in the Sale or Auth.  For US clients: the parameters are identified using the 3DS Authentication endpoint.  For EU clients: the parameters are identified when a cardholder challenge and/or fingerprint authentication is required after calling the Create Sale or Auth Only endpoint with the BrowserData object details.
    """


    class MetaOapg:
        
        class properties:
            SecureCode = schemas.StrSchema
            Cavv = schemas.StrSchema
            Version = schemas.StrSchema
            DirectoryServerTransactionID = schemas.StrSchema
            AcsTransactionId = schemas.StrSchema
            ECI = schemas.StrSchema
            __annotations__ = {
                "SecureCode": SecureCode,
                "Cavv": Cavv,
                "Version": Version,
                "DirectoryServerTransactionID": DirectoryServerTransactionID,
                "AcsTransactionId": AcsTransactionId,
                "ECI": ECI,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SecureCode"]) -> MetaOapg.properties.SecureCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Cavv"]) -> MetaOapg.properties.Cavv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Version"]) -> MetaOapg.properties.Version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DirectoryServerTransactionID"]) -> MetaOapg.properties.DirectoryServerTransactionID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AcsTransactionId"]) -> MetaOapg.properties.AcsTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ECI"]) -> MetaOapg.properties.ECI: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SecureCode", "Cavv", "Version", "DirectoryServerTransactionID", "AcsTransactionId", "ECI", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SecureCode"]) -> typing.Union[MetaOapg.properties.SecureCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Cavv"]) -> typing.Union[MetaOapg.properties.Cavv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Version"]) -> typing.Union[MetaOapg.properties.Version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DirectoryServerTransactionID"]) -> typing.Union[MetaOapg.properties.DirectoryServerTransactionID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AcsTransactionId"]) -> typing.Union[MetaOapg.properties.AcsTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ECI"]) -> typing.Union[MetaOapg.properties.ECI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SecureCode", "Cavv", "Version", "DirectoryServerTransactionID", "AcsTransactionId", "ECI", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        SecureCode: typing.Union[MetaOapg.properties.SecureCode, str, schemas.Unset] = schemas.unset,
        Cavv: typing.Union[MetaOapg.properties.Cavv, str, schemas.Unset] = schemas.unset,
        Version: typing.Union[MetaOapg.properties.Version, str, schemas.Unset] = schemas.unset,
        DirectoryServerTransactionID: typing.Union[MetaOapg.properties.DirectoryServerTransactionID, str, schemas.Unset] = schemas.unset,
        AcsTransactionId: typing.Union[MetaOapg.properties.AcsTransactionId, str, schemas.Unset] = schemas.unset,
        ECI: typing.Union[MetaOapg.properties.ECI, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SaleCreateTransactionRequestCardThreeDs':
        return super().__new__(
            cls,
            *args,
            SecureCode=SecureCode,
            Cavv=Cavv,
            Version=Version,
            DirectoryServerTransactionID=DirectoryServerTransactionID,
            AcsTransactionId=AcsTransactionId,
            ECI=ECI,
            _configuration=_configuration,
            **kwargs,
        )
