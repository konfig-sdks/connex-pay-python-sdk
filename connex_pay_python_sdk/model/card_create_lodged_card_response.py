# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class CardCreateLodgedCardResponse(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class cardHolder(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                cardHolderGuid = schemas.StrSchema
                                firstName = schemas.StrSchema
                                lastName = schemas.StrSchema
                                phone = schemas.StrSchema
                                address1 = schemas.StrSchema
                                address2 = schemas.StrSchema
                                city = schemas.StrSchema
                                state = schemas.StrSchema
                                zipcode = schemas.StrSchema
                                country = schemas.StrSchema
                                __annotations__ = {
                                    "cardHolderGuid": cardHolderGuid,
                                    "firstName": firstName,
                                    "lastName": lastName,
                                    "phone": phone,
                                    "address1": address1,
                                    "address2": address2,
                                    "city": city,
                                    "state": state,
                                    "zipcode": zipcode,
                                    "country": country,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardHolderGuid"]) -> MetaOapg.properties.cardHolderGuid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["address1"]) -> MetaOapg.properties.address1: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["address2"]) -> MetaOapg.properties.address2: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["zipcode"]) -> MetaOapg.properties.zipcode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardHolderGuid", "firstName", "lastName", "phone", "address1", "address2", "city", "state", "zipcode", "country", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardHolderGuid"]) -> typing.Union[MetaOapg.properties.cardHolderGuid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["address1"]) -> typing.Union[MetaOapg.properties.address1, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["address2"]) -> typing.Union[MetaOapg.properties.address2, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["zipcode"]) -> typing.Union[MetaOapg.properties.zipcode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardHolderGuid", "firstName", "lastName", "phone", "address1", "address2", "city", "state", "zipcode", "country", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            cardHolderGuid: typing.Union[MetaOapg.properties.cardHolderGuid, str, schemas.Unset] = schemas.unset,
                            firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
                            lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
                            phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
                            address1: typing.Union[MetaOapg.properties.address1, str, schemas.Unset] = schemas.unset,
                            address2: typing.Union[MetaOapg.properties.address2, str, schemas.Unset] = schemas.unset,
                            city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
                            state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                            zipcode: typing.Union[MetaOapg.properties.zipcode, str, schemas.Unset] = schemas.unset,
                            country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'cardHolder':
                            return super().__new__(
                                cls,
                                *args,
                                cardHolderGuid=cardHolderGuid,
                                firstName=firstName,
                                lastName=lastName,
                                phone=phone,
                                address1=address1,
                                address2=address2,
                                city=city,
                                state=state,
                                zipcode=zipcode,
                                country=country,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class card(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                cardGuid = schemas.StrSchema
                                accountNumber = schemas.StrSchema
                                securityCode = schemas.StrSchema
                                amountLimit = schemas.NumberSchema
                                usageLimit = schemas.IntSchema
                                limitWindow = schemas.StrSchema
                                expirationDate = schemas.StrSchema
                                expiration = schemas.StrSchema
                                currencyCode = schemas.StrSchema
                                firstSix = schemas.StrSchema
                                lastFour = schemas.StrSchema
                                nameLine1 = schemas.StrSchema
                                nameLine2 = schemas.StrSchema
                                status = schemas.StrSchema
                                
                                
                                class midWhitelist(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'midWhitelist':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class midBlacklist(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'midBlacklist':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "cardGuid": cardGuid,
                                    "accountNumber": accountNumber,
                                    "securityCode": securityCode,
                                    "amountLimit": amountLimit,
                                    "usageLimit": usageLimit,
                                    "limitWindow": limitWindow,
                                    "expirationDate": expirationDate,
                                    "expiration": expiration,
                                    "currencyCode": currencyCode,
                                    "firstSix": firstSix,
                                    "lastFour": lastFour,
                                    "nameLine1": nameLine1,
                                    "nameLine2": nameLine2,
                                    "status": status,
                                    "midWhitelist": midWhitelist,
                                    "midBlacklist": midBlacklist,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardGuid"]) -> MetaOapg.properties.cardGuid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["accountNumber"]) -> MetaOapg.properties.accountNumber: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["securityCode"]) -> MetaOapg.properties.securityCode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amountLimit"]) -> MetaOapg.properties.amountLimit: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["usageLimit"]) -> MetaOapg.properties.usageLimit: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["limitWindow"]) -> MetaOapg.properties.limitWindow: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["expiration"]) -> MetaOapg.properties.expiration: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstSix"]) -> MetaOapg.properties.firstSix: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastFour"]) -> MetaOapg.properties.lastFour: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nameLine1"]) -> MetaOapg.properties.nameLine1: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nameLine2"]) -> MetaOapg.properties.nameLine2: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["midWhitelist"]) -> MetaOapg.properties.midWhitelist: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["midBlacklist"]) -> MetaOapg.properties.midBlacklist: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardGuid", "accountNumber", "securityCode", "amountLimit", "usageLimit", "limitWindow", "expirationDate", "expiration", "currencyCode", "firstSix", "lastFour", "nameLine1", "nameLine2", "status", "midWhitelist", "midBlacklist", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardGuid"]) -> typing.Union[MetaOapg.properties.cardGuid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["accountNumber"]) -> typing.Union[MetaOapg.properties.accountNumber, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["securityCode"]) -> typing.Union[MetaOapg.properties.securityCode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amountLimit"]) -> typing.Union[MetaOapg.properties.amountLimit, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["usageLimit"]) -> typing.Union[MetaOapg.properties.usageLimit, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["limitWindow"]) -> typing.Union[MetaOapg.properties.limitWindow, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["expiration"]) -> typing.Union[MetaOapg.properties.expiration, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstSix"]) -> typing.Union[MetaOapg.properties.firstSix, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastFour"]) -> typing.Union[MetaOapg.properties.lastFour, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nameLine1"]) -> typing.Union[MetaOapg.properties.nameLine1, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nameLine2"]) -> typing.Union[MetaOapg.properties.nameLine2, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["midWhitelist"]) -> typing.Union[MetaOapg.properties.midWhitelist, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["midBlacklist"]) -> typing.Union[MetaOapg.properties.midBlacklist, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardGuid", "accountNumber", "securityCode", "amountLimit", "usageLimit", "limitWindow", "expirationDate", "expiration", "currencyCode", "firstSix", "lastFour", "nameLine1", "nameLine2", "status", "midWhitelist", "midBlacklist", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            cardGuid: typing.Union[MetaOapg.properties.cardGuid, str, schemas.Unset] = schemas.unset,
                            accountNumber: typing.Union[MetaOapg.properties.accountNumber, str, schemas.Unset] = schemas.unset,
                            securityCode: typing.Union[MetaOapg.properties.securityCode, str, schemas.Unset] = schemas.unset,
                            amountLimit: typing.Union[MetaOapg.properties.amountLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            usageLimit: typing.Union[MetaOapg.properties.usageLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            limitWindow: typing.Union[MetaOapg.properties.limitWindow, str, schemas.Unset] = schemas.unset,
                            expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, schemas.Unset] = schemas.unset,
                            expiration: typing.Union[MetaOapg.properties.expiration, str, schemas.Unset] = schemas.unset,
                            currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
                            firstSix: typing.Union[MetaOapg.properties.firstSix, str, schemas.Unset] = schemas.unset,
                            lastFour: typing.Union[MetaOapg.properties.lastFour, str, schemas.Unset] = schemas.unset,
                            nameLine1: typing.Union[MetaOapg.properties.nameLine1, str, schemas.Unset] = schemas.unset,
                            nameLine2: typing.Union[MetaOapg.properties.nameLine2, str, schemas.Unset] = schemas.unset,
                            status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                            midWhitelist: typing.Union[MetaOapg.properties.midWhitelist, list, tuple, schemas.Unset] = schemas.unset,
                            midBlacklist: typing.Union[MetaOapg.properties.midBlacklist, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'card':
                            return super().__new__(
                                cls,
                                *args,
                                cardGuid=cardGuid,
                                accountNumber=accountNumber,
                                securityCode=securityCode,
                                amountLimit=amountLimit,
                                usageLimit=usageLimit,
                                limitWindow=limitWindow,
                                expirationDate=expirationDate,
                                expiration=expiration,
                                currencyCode=currencyCode,
                                firstSix=firstSix,
                                lastFour=lastFour,
                                nameLine1=nameLine1,
                                nameLine2=nameLine2,
                                status=status,
                                midWhitelist=midWhitelist,
                                midBlacklist=midBlacklist,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    cardBrand = schemas.StrSchema
                    cardClass = schemas.StrSchema
                    saleGuid = schemas.StrSchema
                    __annotations__ = {
                        "cardHolder": cardHolder,
                        "card": card,
                        "cardBrand": cardBrand,
                        "cardClass": cardClass,
                        "saleGuid": saleGuid,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cardHolder"]) -> MetaOapg.properties.cardHolder: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["card"]) -> MetaOapg.properties.card: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cardBrand"]) -> MetaOapg.properties.cardBrand: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cardClass"]) -> MetaOapg.properties.cardClass: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["saleGuid"]) -> MetaOapg.properties.saleGuid: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardHolder", "card", "cardBrand", "cardClass", "saleGuid", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cardHolder"]) -> typing.Union[MetaOapg.properties.cardHolder, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union[MetaOapg.properties.card, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cardBrand"]) -> typing.Union[MetaOapg.properties.cardBrand, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cardClass"]) -> typing.Union[MetaOapg.properties.cardClass, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["saleGuid"]) -> typing.Union[MetaOapg.properties.saleGuid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardHolder", "card", "cardBrand", "cardClass", "saleGuid", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                cardHolder: typing.Union[MetaOapg.properties.cardHolder, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                card: typing.Union[MetaOapg.properties.card, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                cardBrand: typing.Union[MetaOapg.properties.cardBrand, str, schemas.Unset] = schemas.unset,
                cardClass: typing.Union[MetaOapg.properties.cardClass, str, schemas.Unset] = schemas.unset,
                saleGuid: typing.Union[MetaOapg.properties.saleGuid, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *args,
                    cardHolder=cardHolder,
                    card=card,
                    cardBrand=cardBrand,
                    cardClass=cardClass,
                    saleGuid=saleGuid,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class one_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class cardHolder(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                cardHolderGuid = schemas.StrSchema
                                firstName = schemas.StrSchema
                                lastName = schemas.StrSchema
                                phone = schemas.StrSchema
                                address1 = schemas.StrSchema
                                address2 = schemas.StrSchema
                                city = schemas.StrSchema
                                state = schemas.StrSchema
                                zipcode = schemas.StrSchema
                                country = schemas.StrSchema
                                __annotations__ = {
                                    "cardHolderGuid": cardHolderGuid,
                                    "firstName": firstName,
                                    "lastName": lastName,
                                    "phone": phone,
                                    "address1": address1,
                                    "address2": address2,
                                    "city": city,
                                    "state": state,
                                    "zipcode": zipcode,
                                    "country": country,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardHolderGuid"]) -> MetaOapg.properties.cardHolderGuid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["address1"]) -> MetaOapg.properties.address1: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["address2"]) -> MetaOapg.properties.address2: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["zipcode"]) -> MetaOapg.properties.zipcode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardHolderGuid", "firstName", "lastName", "phone", "address1", "address2", "city", "state", "zipcode", "country", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardHolderGuid"]) -> typing.Union[MetaOapg.properties.cardHolderGuid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["address1"]) -> typing.Union[MetaOapg.properties.address1, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["address2"]) -> typing.Union[MetaOapg.properties.address2, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["zipcode"]) -> typing.Union[MetaOapg.properties.zipcode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardHolderGuid", "firstName", "lastName", "phone", "address1", "address2", "city", "state", "zipcode", "country", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            cardHolderGuid: typing.Union[MetaOapg.properties.cardHolderGuid, str, schemas.Unset] = schemas.unset,
                            firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
                            lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
                            phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
                            address1: typing.Union[MetaOapg.properties.address1, str, schemas.Unset] = schemas.unset,
                            address2: typing.Union[MetaOapg.properties.address2, str, schemas.Unset] = schemas.unset,
                            city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
                            state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
                            zipcode: typing.Union[MetaOapg.properties.zipcode, str, schemas.Unset] = schemas.unset,
                            country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'cardHolder':
                            return super().__new__(
                                cls,
                                *args,
                                cardHolderGuid=cardHolderGuid,
                                firstName=firstName,
                                lastName=lastName,
                                phone=phone,
                                address1=address1,
                                address2=address2,
                                city=city,
                                state=state,
                                zipcode=zipcode,
                                country=country,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    
                    class card(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                cardGuid = schemas.StrSchema
                                amountLimit = schemas.NumberSchema
                                usageLimit = schemas.IntSchema
                                limitWindow = schemas.StrSchema
                                expirationDate = schemas.StrSchema
                                expiration = schemas.StrSchema
                                currencyCode = schemas.StrSchema
                                firstSix = schemas.StrSchema
                                lastFour = schemas.StrSchema
                                nameLine1 = schemas.StrSchema
                                nameLine2 = schemas.StrSchema
                                status = schemas.StrSchema
                                
                                
                                class midWhitelist(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'midWhitelist':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class midBlacklist(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'midBlacklist':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "cardGuid": cardGuid,
                                    "amountLimit": amountLimit,
                                    "usageLimit": usageLimit,
                                    "limitWindow": limitWindow,
                                    "expirationDate": expirationDate,
                                    "expiration": expiration,
                                    "currencyCode": currencyCode,
                                    "firstSix": firstSix,
                                    "lastFour": lastFour,
                                    "nameLine1": nameLine1,
                                    "nameLine2": nameLine2,
                                    "status": status,
                                    "midWhitelist": midWhitelist,
                                    "midBlacklist": midBlacklist,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardGuid"]) -> MetaOapg.properties.cardGuid: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amountLimit"]) -> MetaOapg.properties.amountLimit: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["usageLimit"]) -> MetaOapg.properties.usageLimit: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["limitWindow"]) -> MetaOapg.properties.limitWindow: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["expiration"]) -> MetaOapg.properties.expiration: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstSix"]) -> MetaOapg.properties.firstSix: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastFour"]) -> MetaOapg.properties.lastFour: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nameLine1"]) -> MetaOapg.properties.nameLine1: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nameLine2"]) -> MetaOapg.properties.nameLine2: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["midWhitelist"]) -> MetaOapg.properties.midWhitelist: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["midBlacklist"]) -> MetaOapg.properties.midBlacklist: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardGuid", "amountLimit", "usageLimit", "limitWindow", "expirationDate", "expiration", "currencyCode", "firstSix", "lastFour", "nameLine1", "nameLine2", "status", "midWhitelist", "midBlacklist", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardGuid"]) -> typing.Union[MetaOapg.properties.cardGuid, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amountLimit"]) -> typing.Union[MetaOapg.properties.amountLimit, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["usageLimit"]) -> typing.Union[MetaOapg.properties.usageLimit, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["limitWindow"]) -> typing.Union[MetaOapg.properties.limitWindow, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["expiration"]) -> typing.Union[MetaOapg.properties.expiration, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstSix"]) -> typing.Union[MetaOapg.properties.firstSix, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastFour"]) -> typing.Union[MetaOapg.properties.lastFour, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nameLine1"]) -> typing.Union[MetaOapg.properties.nameLine1, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nameLine2"]) -> typing.Union[MetaOapg.properties.nameLine2, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["midWhitelist"]) -> typing.Union[MetaOapg.properties.midWhitelist, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["midBlacklist"]) -> typing.Union[MetaOapg.properties.midBlacklist, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardGuid", "amountLimit", "usageLimit", "limitWindow", "expirationDate", "expiration", "currencyCode", "firstSix", "lastFour", "nameLine1", "nameLine2", "status", "midWhitelist", "midBlacklist", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            cardGuid: typing.Union[MetaOapg.properties.cardGuid, str, schemas.Unset] = schemas.unset,
                            amountLimit: typing.Union[MetaOapg.properties.amountLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            usageLimit: typing.Union[MetaOapg.properties.usageLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            limitWindow: typing.Union[MetaOapg.properties.limitWindow, str, schemas.Unset] = schemas.unset,
                            expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, schemas.Unset] = schemas.unset,
                            expiration: typing.Union[MetaOapg.properties.expiration, str, schemas.Unset] = schemas.unset,
                            currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
                            firstSix: typing.Union[MetaOapg.properties.firstSix, str, schemas.Unset] = schemas.unset,
                            lastFour: typing.Union[MetaOapg.properties.lastFour, str, schemas.Unset] = schemas.unset,
                            nameLine1: typing.Union[MetaOapg.properties.nameLine1, str, schemas.Unset] = schemas.unset,
                            nameLine2: typing.Union[MetaOapg.properties.nameLine2, str, schemas.Unset] = schemas.unset,
                            status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                            midWhitelist: typing.Union[MetaOapg.properties.midWhitelist, list, tuple, schemas.Unset] = schemas.unset,
                            midBlacklist: typing.Union[MetaOapg.properties.midBlacklist, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'card':
                            return super().__new__(
                                cls,
                                *args,
                                cardGuid=cardGuid,
                                amountLimit=amountLimit,
                                usageLimit=usageLimit,
                                limitWindow=limitWindow,
                                expirationDate=expirationDate,
                                expiration=expiration,
                                currencyCode=currencyCode,
                                firstSix=firstSix,
                                lastFour=lastFour,
                                nameLine1=nameLine1,
                                nameLine2=nameLine2,
                                status=status,
                                midWhitelist=midWhitelist,
                                midBlacklist=midBlacklist,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    cardBrand = schemas.StrSchema
                    cardClass = schemas.StrSchema
                    saleGuid = schemas.StrSchema
                    __annotations__ = {
                        "cardHolder": cardHolder,
                        "card": card,
                        "cardBrand": cardBrand,
                        "cardClass": cardClass,
                        "saleGuid": saleGuid,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cardHolder"]) -> MetaOapg.properties.cardHolder: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["card"]) -> MetaOapg.properties.card: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cardBrand"]) -> MetaOapg.properties.cardBrand: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cardClass"]) -> MetaOapg.properties.cardClass: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["saleGuid"]) -> MetaOapg.properties.saleGuid: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardHolder", "card", "cardBrand", "cardClass", "saleGuid", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cardHolder"]) -> typing.Union[MetaOapg.properties.cardHolder, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union[MetaOapg.properties.card, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cardBrand"]) -> typing.Union[MetaOapg.properties.cardBrand, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cardClass"]) -> typing.Union[MetaOapg.properties.cardClass, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["saleGuid"]) -> typing.Union[MetaOapg.properties.saleGuid, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardHolder", "card", "cardBrand", "cardClass", "saleGuid", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                cardHolder: typing.Union[MetaOapg.properties.cardHolder, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                card: typing.Union[MetaOapg.properties.card, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                cardBrand: typing.Union[MetaOapg.properties.cardBrand, str, schemas.Unset] = schemas.unset,
                cardClass: typing.Union[MetaOapg.properties.cardClass, str, schemas.Unset] = schemas.unset,
                saleGuid: typing.Union[MetaOapg.properties.saleGuid, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    *args,
                    cardHolder=cardHolder,
                    card=card,
                    cardBrand=cardBrand,
                    cardClass=cardClass,
                    saleGuid=saleGuid,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardCreateLodgedCardResponse':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
