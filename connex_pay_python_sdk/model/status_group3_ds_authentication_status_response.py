# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class StatusGroup3DsAuthenticationStatusResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            version = schemas.StrSchema
            guid = schemas.StrSchema
            status = schemas.StrSchema
            timeStamp = schemas.StrSchema
            deviceGuid = schemas.StrSchema
            amount = schemas.NumberSchema
            secureData = schemas.StrSchema
            eci = schemas.StrSchema
            cavv = schemas.StrSchema
            directoryServerTransactionID = schemas.StrSchema
            acsTransactionId = schemas.StrSchema
        
            @staticmethod
            def card() -> typing.Type['StatusGroup3DsAuthenticationStatusResponseCard']:
                return StatusGroup3DsAuthenticationStatusResponseCard
            processorResponseCode = schemas.StrSchema
            processorMessage = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "guid": guid,
                "status": status,
                "timeStamp": timeStamp,
                "deviceGuid": deviceGuid,
                "amount": amount,
                "secureData": secureData,
                "eci": eci,
                "cavv": cavv,
                "directoryServerTransactionID": directoryServerTransactionID,
                "acsTransactionId": acsTransactionId,
                "card": card,
                "processorResponseCode": processorResponseCode,
                "processorMessage": processorMessage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceGuid"]) -> MetaOapg.properties.deviceGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secureData"]) -> MetaOapg.properties.secureData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eci"]) -> MetaOapg.properties.eci: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cavv"]) -> MetaOapg.properties.cavv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directoryServerTransactionID"]) -> MetaOapg.properties.directoryServerTransactionID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acsTransactionId"]) -> MetaOapg.properties.acsTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card"]) -> 'StatusGroup3DsAuthenticationStatusResponseCard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processorResponseCode"]) -> MetaOapg.properties.processorResponseCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processorMessage"]) -> MetaOapg.properties.processorMessage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "guid", "status", "timeStamp", "deviceGuid", "amount", "secureData", "eci", "cavv", "directoryServerTransactionID", "acsTransactionId", "card", "processorResponseCode", "processorMessage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceGuid"]) -> typing.Union[MetaOapg.properties.deviceGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secureData"]) -> typing.Union[MetaOapg.properties.secureData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eci"]) -> typing.Union[MetaOapg.properties.eci, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cavv"]) -> typing.Union[MetaOapg.properties.cavv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directoryServerTransactionID"]) -> typing.Union[MetaOapg.properties.directoryServerTransactionID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acsTransactionId"]) -> typing.Union[MetaOapg.properties.acsTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union['StatusGroup3DsAuthenticationStatusResponseCard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processorResponseCode"]) -> typing.Union[MetaOapg.properties.processorResponseCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processorMessage"]) -> typing.Union[MetaOapg.properties.processorMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "guid", "status", "timeStamp", "deviceGuid", "amount", "secureData", "eci", "cavv", "directoryServerTransactionID", "acsTransactionId", "card", "processorResponseCode", "processorMessage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
        deviceGuid: typing.Union[MetaOapg.properties.deviceGuid, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        secureData: typing.Union[MetaOapg.properties.secureData, str, schemas.Unset] = schemas.unset,
        eci: typing.Union[MetaOapg.properties.eci, str, schemas.Unset] = schemas.unset,
        cavv: typing.Union[MetaOapg.properties.cavv, str, schemas.Unset] = schemas.unset,
        directoryServerTransactionID: typing.Union[MetaOapg.properties.directoryServerTransactionID, str, schemas.Unset] = schemas.unset,
        acsTransactionId: typing.Union[MetaOapg.properties.acsTransactionId, str, schemas.Unset] = schemas.unset,
        card: typing.Union['StatusGroup3DsAuthenticationStatusResponseCard', schemas.Unset] = schemas.unset,
        processorResponseCode: typing.Union[MetaOapg.properties.processorResponseCode, str, schemas.Unset] = schemas.unset,
        processorMessage: typing.Union[MetaOapg.properties.processorMessage, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StatusGroup3DsAuthenticationStatusResponse':
        return super().__new__(
            cls,
            *args,
            version=version,
            guid=guid,
            status=status,
            timeStamp=timeStamp,
            deviceGuid=deviceGuid,
            amount=amount,
            secureData=secureData,
            eci=eci,
            cavv=cavv,
            directoryServerTransactionID=directoryServerTransactionID,
            acsTransactionId=acsTransactionId,
            card=card,
            processorResponseCode=processorResponseCode,
            processorMessage=processorMessage,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.status_group3_ds_authentication_status_response_card import StatusGroup3DsAuthenticationStatusResponseCard
