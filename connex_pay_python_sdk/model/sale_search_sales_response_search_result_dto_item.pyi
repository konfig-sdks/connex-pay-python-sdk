# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SaleSearchSalesResponseSearchResultDtoItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            status = schemas.StrSchema
            amount = schemas.IntSchema
        
            @staticmethod
            def card() -> typing.Type['SaleSearchSalesResponseSearchResultDtoItemCard']:
                return SaleSearchSalesResponseSearchResultDtoItemCard
            orderNumber = schemas.AnyTypeSchema
            orderDate = schemas.AnyTypeSchema
            timeStamp = schemas.StrSchema
            customerID = schemas.AnyTypeSchema
            processorResponseMessage = schemas.AnyTypeSchema
            effectiveAmount = schemas.IntSchema
            batchStatus = schemas.StrSchema
            relatedVoid = schemas.AnyTypeSchema
            relatedReturns = schemas.AnyTypeSchema
            guid = schemas.StrSchema
            deviceGuid = schemas.StrSchema
            captureGuid = schemas.AnyTypeSchema
            customData = schemas.AnyTypeSchema
            generatedByCapture = schemas.BoolSchema
            partiallyApprovedAmount = schemas.AnyTypeSchema
            type = schemas.StrSchema
            surcharge = schemas.AnyTypeSchema
            surchargeType = schemas.AnyTypeSchema
            serviceFee = schemas.AnyTypeSchema
            tipAmount = schemas.AnyTypeSchema
            cardDataSource = schemas.StrSchema
            allowCardEmv = schemas.BoolSchema
            incomingTransactionCode = schemas.StrSchema
            activationDate = schemas.StrSchema
            __annotations__ = {
                "status": status,
                "amount": amount,
                "card": card,
                "orderNumber": orderNumber,
                "orderDate": orderDate,
                "timeStamp": timeStamp,
                "customerID": customerID,
                "processorResponseMessage": processorResponseMessage,
                "effectiveAmount": effectiveAmount,
                "batchStatus": batchStatus,
                "relatedVoid": relatedVoid,
                "relatedReturns": relatedReturns,
                "guid": guid,
                "deviceGuid": deviceGuid,
                "captureGuid": captureGuid,
                "customData": customData,
                "generatedByCapture": generatedByCapture,
                "partiallyApprovedAmount": partiallyApprovedAmount,
                "type": type,
                "surcharge": surcharge,
                "surchargeType": surchargeType,
                "serviceFee": serviceFee,
                "tipAmount": tipAmount,
                "cardDataSource": cardDataSource,
                "allowCardEmv": allowCardEmv,
                "incomingTransactionCode": incomingTransactionCode,
                "activationDate": activationDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card"]) -> 'SaleSearchSalesResponseSearchResultDtoItemCard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderNumber"]) -> MetaOapg.properties.orderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderDate"]) -> MetaOapg.properties.orderDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerID"]) -> MetaOapg.properties.customerID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processorResponseMessage"]) -> MetaOapg.properties.processorResponseMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveAmount"]) -> MetaOapg.properties.effectiveAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchStatus"]) -> MetaOapg.properties.batchStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedVoid"]) -> MetaOapg.properties.relatedVoid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedReturns"]) -> MetaOapg.properties.relatedReturns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceGuid"]) -> MetaOapg.properties.deviceGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["captureGuid"]) -> MetaOapg.properties.captureGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customData"]) -> MetaOapg.properties.customData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generatedByCapture"]) -> MetaOapg.properties.generatedByCapture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partiallyApprovedAmount"]) -> MetaOapg.properties.partiallyApprovedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surcharge"]) -> MetaOapg.properties.surcharge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surchargeType"]) -> MetaOapg.properties.surchargeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceFee"]) -> MetaOapg.properties.serviceFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tipAmount"]) -> MetaOapg.properties.tipAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardDataSource"]) -> MetaOapg.properties.cardDataSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowCardEmv"]) -> MetaOapg.properties.allowCardEmv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incomingTransactionCode"]) -> MetaOapg.properties.incomingTransactionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activationDate"]) -> MetaOapg.properties.activationDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "amount", "card", "orderNumber", "orderDate", "timeStamp", "customerID", "processorResponseMessage", "effectiveAmount", "batchStatus", "relatedVoid", "relatedReturns", "guid", "deviceGuid", "captureGuid", "customData", "generatedByCapture", "partiallyApprovedAmount", "type", "surcharge", "surchargeType", "serviceFee", "tipAmount", "cardDataSource", "allowCardEmv", "incomingTransactionCode", "activationDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union['SaleSearchSalesResponseSearchResultDtoItemCard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderNumber"]) -> typing.Union[MetaOapg.properties.orderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderDate"]) -> typing.Union[MetaOapg.properties.orderDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerID"]) -> typing.Union[MetaOapg.properties.customerID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processorResponseMessage"]) -> typing.Union[MetaOapg.properties.processorResponseMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveAmount"]) -> typing.Union[MetaOapg.properties.effectiveAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchStatus"]) -> typing.Union[MetaOapg.properties.batchStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedVoid"]) -> typing.Union[MetaOapg.properties.relatedVoid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedReturns"]) -> typing.Union[MetaOapg.properties.relatedReturns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceGuid"]) -> typing.Union[MetaOapg.properties.deviceGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["captureGuid"]) -> typing.Union[MetaOapg.properties.captureGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customData"]) -> typing.Union[MetaOapg.properties.customData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generatedByCapture"]) -> typing.Union[MetaOapg.properties.generatedByCapture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partiallyApprovedAmount"]) -> typing.Union[MetaOapg.properties.partiallyApprovedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surcharge"]) -> typing.Union[MetaOapg.properties.surcharge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surchargeType"]) -> typing.Union[MetaOapg.properties.surchargeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceFee"]) -> typing.Union[MetaOapg.properties.serviceFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tipAmount"]) -> typing.Union[MetaOapg.properties.tipAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardDataSource"]) -> typing.Union[MetaOapg.properties.cardDataSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowCardEmv"]) -> typing.Union[MetaOapg.properties.allowCardEmv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incomingTransactionCode"]) -> typing.Union[MetaOapg.properties.incomingTransactionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activationDate"]) -> typing.Union[MetaOapg.properties.activationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "amount", "card", "orderNumber", "orderDate", "timeStamp", "customerID", "processorResponseMessage", "effectiveAmount", "batchStatus", "relatedVoid", "relatedReturns", "guid", "deviceGuid", "captureGuid", "customData", "generatedByCapture", "partiallyApprovedAmount", "type", "surcharge", "surchargeType", "serviceFee", "tipAmount", "cardDataSource", "allowCardEmv", "incomingTransactionCode", "activationDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        card: typing.Union['SaleSearchSalesResponseSearchResultDtoItemCard', schemas.Unset] = schemas.unset,
        orderNumber: typing.Union[MetaOapg.properties.orderNumber, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        orderDate: typing.Union[MetaOapg.properties.orderDate, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
        customerID: typing.Union[MetaOapg.properties.customerID, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        processorResponseMessage: typing.Union[MetaOapg.properties.processorResponseMessage, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        effectiveAmount: typing.Union[MetaOapg.properties.effectiveAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        batchStatus: typing.Union[MetaOapg.properties.batchStatus, str, schemas.Unset] = schemas.unset,
        relatedVoid: typing.Union[MetaOapg.properties.relatedVoid, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        relatedReturns: typing.Union[MetaOapg.properties.relatedReturns, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
        deviceGuid: typing.Union[MetaOapg.properties.deviceGuid, str, schemas.Unset] = schemas.unset,
        captureGuid: typing.Union[MetaOapg.properties.captureGuid, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        customData: typing.Union[MetaOapg.properties.customData, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        generatedByCapture: typing.Union[MetaOapg.properties.generatedByCapture, bool, schemas.Unset] = schemas.unset,
        partiallyApprovedAmount: typing.Union[MetaOapg.properties.partiallyApprovedAmount, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        surcharge: typing.Union[MetaOapg.properties.surcharge, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        surchargeType: typing.Union[MetaOapg.properties.surchargeType, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        serviceFee: typing.Union[MetaOapg.properties.serviceFee, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        tipAmount: typing.Union[MetaOapg.properties.tipAmount, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cardDataSource: typing.Union[MetaOapg.properties.cardDataSource, str, schemas.Unset] = schemas.unset,
        allowCardEmv: typing.Union[MetaOapg.properties.allowCardEmv, bool, schemas.Unset] = schemas.unset,
        incomingTransactionCode: typing.Union[MetaOapg.properties.incomingTransactionCode, str, schemas.Unset] = schemas.unset,
        activationDate: typing.Union[MetaOapg.properties.activationDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SaleSearchSalesResponseSearchResultDtoItem':
        return super().__new__(
            cls,
            *args,
            status=status,
            amount=amount,
            card=card,
            orderNumber=orderNumber,
            orderDate=orderDate,
            timeStamp=timeStamp,
            customerID=customerID,
            processorResponseMessage=processorResponseMessage,
            effectiveAmount=effectiveAmount,
            batchStatus=batchStatus,
            relatedVoid=relatedVoid,
            relatedReturns=relatedReturns,
            guid=guid,
            deviceGuid=deviceGuid,
            captureGuid=captureGuid,
            customData=customData,
            generatedByCapture=generatedByCapture,
            partiallyApprovedAmount=partiallyApprovedAmount,
            type=type,
            surcharge=surcharge,
            surchargeType=surchargeType,
            serviceFee=serviceFee,
            tipAmount=tipAmount,
            cardDataSource=cardDataSource,
            allowCardEmv=allowCardEmv,
            incomingTransactionCode=incomingTransactionCode,
            activationDate=activationDate,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.sale_search_sales_response_search_result_dto_item_card import SaleSearchSalesResponseSearchResultDtoItemCard
