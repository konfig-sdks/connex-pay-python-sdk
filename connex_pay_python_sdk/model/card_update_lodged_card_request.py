# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class CardUpdateLodgedCardRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            UsageLimit = schemas.Int64Schema
            AmountLimit = schemas.Float32Schema
            LimitWindow = schemas.StrSchema
            PurchaseType = schemas.StrSchema
            Activated = schemas.BoolSchema
            AssociationId = schemas.StrSchema
            TerminateDate = schemas.DateSchema
            __annotations__ = {
                "UsageLimit": UsageLimit,
                "AmountLimit": AmountLimit,
                "LimitWindow": LimitWindow,
                "PurchaseType": PurchaseType,
                "Activated": Activated,
                "AssociationId": AssociationId,
                "TerminateDate": TerminateDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UsageLimit"]) -> MetaOapg.properties.UsageLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AmountLimit"]) -> MetaOapg.properties.AmountLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LimitWindow"]) -> MetaOapg.properties.LimitWindow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PurchaseType"]) -> MetaOapg.properties.PurchaseType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Activated"]) -> MetaOapg.properties.Activated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AssociationId"]) -> MetaOapg.properties.AssociationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TerminateDate"]) -> MetaOapg.properties.TerminateDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["UsageLimit", "AmountLimit", "LimitWindow", "PurchaseType", "Activated", "AssociationId", "TerminateDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UsageLimit"]) -> typing.Union[MetaOapg.properties.UsageLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AmountLimit"]) -> typing.Union[MetaOapg.properties.AmountLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LimitWindow"]) -> typing.Union[MetaOapg.properties.LimitWindow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PurchaseType"]) -> typing.Union[MetaOapg.properties.PurchaseType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Activated"]) -> typing.Union[MetaOapg.properties.Activated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AssociationId"]) -> typing.Union[MetaOapg.properties.AssociationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TerminateDate"]) -> typing.Union[MetaOapg.properties.TerminateDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["UsageLimit", "AmountLimit", "LimitWindow", "PurchaseType", "Activated", "AssociationId", "TerminateDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        UsageLimit: typing.Union[MetaOapg.properties.UsageLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AmountLimit: typing.Union[MetaOapg.properties.AmountLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        LimitWindow: typing.Union[MetaOapg.properties.LimitWindow, str, schemas.Unset] = schemas.unset,
        PurchaseType: typing.Union[MetaOapg.properties.PurchaseType, str, schemas.Unset] = schemas.unset,
        Activated: typing.Union[MetaOapg.properties.Activated, bool, schemas.Unset] = schemas.unset,
        AssociationId: typing.Union[MetaOapg.properties.AssociationId, str, schemas.Unset] = schemas.unset,
        TerminateDate: typing.Union[MetaOapg.properties.TerminateDate, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardUpdateLodgedCardRequest':
        return super().__new__(
            cls,
            *args,
            UsageLimit=UsageLimit,
            AmountLimit=AmountLimit,
            LimitWindow=LimitWindow,
            PurchaseType=PurchaseType,
            Activated=Activated,
            AssociationId=AssociationId,
            TerminateDate=TerminateDate,
            _configuration=_configuration,
            **kwargs,
        )
