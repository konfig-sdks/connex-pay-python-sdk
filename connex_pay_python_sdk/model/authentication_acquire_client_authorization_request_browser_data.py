# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class AuthenticationAcquireClientAuthorizationRequestBrowserData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    3D secure parameters required to be submitted with Auth Only request to initiate 3D secure authentication via ConnexPay's interface.  A signed contract for 3D Secure is required in order to use this feature.
    """


    class MetaOapg:
        required = {
            "UserAgentHeader",
            "Language",
            "AcceptanceHeader",
            "ScreenWidth",
            "RedirectURL",
            "JavaEnabled",
            "ScreenHeight",
            "ColorDepth",
            "TimeZoneOffset",
        }
        
        class properties:
            AcceptanceHeader = schemas.StrSchema
            ColorDepth = schemas.Int32Schema
            JavaEnabled = schemas.BoolSchema
            ScreenHeight = schemas.Int32Schema
            ScreenWidth = schemas.Int32Schema
            TimeZoneOffset = schemas.Int32Schema
            Language = schemas.StrSchema
            RedirectURL = schemas.StrSchema
            UserAgentHeader = schemas.StrSchema
            __annotations__ = {
                "AcceptanceHeader": AcceptanceHeader,
                "ColorDepth": ColorDepth,
                "JavaEnabled": JavaEnabled,
                "ScreenHeight": ScreenHeight,
                "ScreenWidth": ScreenWidth,
                "TimeZoneOffset": TimeZoneOffset,
                "Language": Language,
                "RedirectURL": RedirectURL,
                "UserAgentHeader": UserAgentHeader,
            }
    
    UserAgentHeader: MetaOapg.properties.UserAgentHeader
    Language: MetaOapg.properties.Language
    AcceptanceHeader: MetaOapg.properties.AcceptanceHeader
    ScreenWidth: MetaOapg.properties.ScreenWidth
    RedirectURL: MetaOapg.properties.RedirectURL
    JavaEnabled: MetaOapg.properties.JavaEnabled
    ScreenHeight: MetaOapg.properties.ScreenHeight
    ColorDepth: MetaOapg.properties.ColorDepth
    TimeZoneOffset: MetaOapg.properties.TimeZoneOffset
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AcceptanceHeader"]) -> MetaOapg.properties.AcceptanceHeader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ColorDepth"]) -> MetaOapg.properties.ColorDepth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["JavaEnabled"]) -> MetaOapg.properties.JavaEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ScreenHeight"]) -> MetaOapg.properties.ScreenHeight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ScreenWidth"]) -> MetaOapg.properties.ScreenWidth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TimeZoneOffset"]) -> MetaOapg.properties.TimeZoneOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RedirectURL"]) -> MetaOapg.properties.RedirectURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UserAgentHeader"]) -> MetaOapg.properties.UserAgentHeader: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AcceptanceHeader", "ColorDepth", "JavaEnabled", "ScreenHeight", "ScreenWidth", "TimeZoneOffset", "Language", "RedirectURL", "UserAgentHeader", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AcceptanceHeader"]) -> MetaOapg.properties.AcceptanceHeader: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ColorDepth"]) -> MetaOapg.properties.ColorDepth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["JavaEnabled"]) -> MetaOapg.properties.JavaEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ScreenHeight"]) -> MetaOapg.properties.ScreenHeight: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ScreenWidth"]) -> MetaOapg.properties.ScreenWidth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TimeZoneOffset"]) -> MetaOapg.properties.TimeZoneOffset: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RedirectURL"]) -> MetaOapg.properties.RedirectURL: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UserAgentHeader"]) -> MetaOapg.properties.UserAgentHeader: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AcceptanceHeader", "ColorDepth", "JavaEnabled", "ScreenHeight", "ScreenWidth", "TimeZoneOffset", "Language", "RedirectURL", "UserAgentHeader", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        UserAgentHeader: typing.Union[MetaOapg.properties.UserAgentHeader, str, ],
        Language: typing.Union[MetaOapg.properties.Language, str, ],
        AcceptanceHeader: typing.Union[MetaOapg.properties.AcceptanceHeader, str, ],
        ScreenWidth: typing.Union[MetaOapg.properties.ScreenWidth, decimal.Decimal, int, ],
        RedirectURL: typing.Union[MetaOapg.properties.RedirectURL, str, ],
        JavaEnabled: typing.Union[MetaOapg.properties.JavaEnabled, bool, ],
        ScreenHeight: typing.Union[MetaOapg.properties.ScreenHeight, decimal.Decimal, int, ],
        ColorDepth: typing.Union[MetaOapg.properties.ColorDepth, decimal.Decimal, int, ],
        TimeZoneOffset: typing.Union[MetaOapg.properties.TimeZoneOffset, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthenticationAcquireClientAuthorizationRequestBrowserData':
        return super().__new__(
            cls,
            *args,
            UserAgentHeader=UserAgentHeader,
            Language=Language,
            AcceptanceHeader=AcceptanceHeader,
            ScreenWidth=ScreenWidth,
            RedirectURL=RedirectURL,
            JavaEnabled=JavaEnabled,
            ScreenHeight=ScreenHeight,
            ColorDepth=ColorDepth,
            TimeZoneOffset=TimeZoneOffset,
            _configuration=_configuration,
            **kwargs,
        )
