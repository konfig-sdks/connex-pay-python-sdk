# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class SettingTokenizeBankAccountInfoResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            merchantGuid = schemas.StrSchema
            supplierName = schemas.StrSchema
            timeStamp = schemas.StrSchema
            idUser = schemas.IntSchema
            idMerchantSupplierSettings = schemas.IntSchema
        
            @staticmethod
            def accountHolder() -> typing.Type['SettingTokenizeBankAccountInfoResponseAccountHolder']:
                return SettingTokenizeBankAccountInfoResponseAccountHolder
            userName = schemas.StrSchema
            __annotations__ = {
                "merchantGuid": merchantGuid,
                "supplierName": supplierName,
                "timeStamp": timeStamp,
                "idUser": idUser,
                "idMerchantSupplierSettings": idMerchantSupplierSettings,
                "accountHolder": accountHolder,
                "userName": userName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantGuid"]) -> MetaOapg.properties.merchantGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supplierName"]) -> MetaOapg.properties.supplierName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idUser"]) -> MetaOapg.properties.idUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idMerchantSupplierSettings"]) -> MetaOapg.properties.idMerchantSupplierSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountHolder"]) -> 'SettingTokenizeBankAccountInfoResponseAccountHolder': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["merchantGuid", "supplierName", "timeStamp", "idUser", "idMerchantSupplierSettings", "accountHolder", "userName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantGuid"]) -> typing.Union[MetaOapg.properties.merchantGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supplierName"]) -> typing.Union[MetaOapg.properties.supplierName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idUser"]) -> typing.Union[MetaOapg.properties.idUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idMerchantSupplierSettings"]) -> typing.Union[MetaOapg.properties.idMerchantSupplierSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountHolder"]) -> typing.Union['SettingTokenizeBankAccountInfoResponseAccountHolder', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["merchantGuid", "supplierName", "timeStamp", "idUser", "idMerchantSupplierSettings", "accountHolder", "userName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        merchantGuid: typing.Union[MetaOapg.properties.merchantGuid, str, schemas.Unset] = schemas.unset,
        supplierName: typing.Union[MetaOapg.properties.supplierName, str, schemas.Unset] = schemas.unset,
        timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
        idUser: typing.Union[MetaOapg.properties.idUser, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        idMerchantSupplierSettings: typing.Union[MetaOapg.properties.idMerchantSupplierSettings, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accountHolder: typing.Union['SettingTokenizeBankAccountInfoResponseAccountHolder', schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SettingTokenizeBankAccountInfoResponse':
        return super().__new__(
            cls,
            *args,
            merchantGuid=merchantGuid,
            supplierName=supplierName,
            timeStamp=timeStamp,
            idUser=idUser,
            idMerchantSupplierSettings=idMerchantSupplierSettings,
            accountHolder=accountHolder,
            userName=userName,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.setting_tokenize_bank_account_info_response_account_holder import SettingTokenizeBankAccountInfoResponseAccountHolder
