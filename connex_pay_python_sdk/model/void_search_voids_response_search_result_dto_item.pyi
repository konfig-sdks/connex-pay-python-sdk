# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class VoidSearchVoidsResponseSearchResultDtoItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            status = schemas.StrSchema
        
            @staticmethod
            def sale() -> typing.Type['VoidSearchVoidsResponseSearchResultDtoItemSale']:
                return VoidSearchVoidsResponseSearchResultDtoItemSale
            authOnly = schemas.AnyTypeSchema
            debitSale = schemas.AnyTypeSchema
            debitReturn = schemas.AnyTypeSchema
            ebtFoodStampPurchase = schemas.AnyTypeSchema
            ebtElectronicVoucher = schemas.AnyTypeSchema
            ebtReturn = schemas.AnyTypeSchema
            ebtCashBenefitPurchase = schemas.AnyTypeSchema
            _return = schemas.AnyTypeSchema
            voidReason = schemas.AnyTypeSchema
            timeStamp = schemas.StrSchema
            processorStatusCode = schemas.StrSchema
            batchStatus = schemas.StrSchema
            guid = schemas.StrSchema
            allowCardEmv = schemas.BoolSchema
            __annotations__ = {
                "status": status,
                "sale": sale,
                "authOnly": authOnly,
                "debitSale": debitSale,
                "debitReturn": debitReturn,
                "ebtFoodStampPurchase": ebtFoodStampPurchase,
                "ebtElectronicVoucher": ebtElectronicVoucher,
                "ebtReturn": ebtReturn,
                "ebtCashBenefitPurchase": ebtCashBenefitPurchase,
                "return": _return,
                "voidReason": voidReason,
                "timeStamp": timeStamp,
                "processorStatusCode": processorStatusCode,
                "batchStatus": batchStatus,
                "guid": guid,
                "allowCardEmv": allowCardEmv,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sale"]) -> 'VoidSearchVoidsResponseSearchResultDtoItemSale': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authOnly"]) -> MetaOapg.properties.authOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debitSale"]) -> MetaOapg.properties.debitSale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debitReturn"]) -> MetaOapg.properties.debitReturn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ebtFoodStampPurchase"]) -> MetaOapg.properties.ebtFoodStampPurchase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ebtElectronicVoucher"]) -> MetaOapg.properties.ebtElectronicVoucher: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ebtReturn"]) -> MetaOapg.properties.ebtReturn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ebtCashBenefitPurchase"]) -> MetaOapg.properties.ebtCashBenefitPurchase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["return"]) -> MetaOapg.properties._return: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voidReason"]) -> MetaOapg.properties.voidReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeStamp"]) -> MetaOapg.properties.timeStamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processorStatusCode"]) -> MetaOapg.properties.processorStatusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchStatus"]) -> MetaOapg.properties.batchStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowCardEmv"]) -> MetaOapg.properties.allowCardEmv: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "sale", "authOnly", "debitSale", "debitReturn", "ebtFoodStampPurchase", "ebtElectronicVoucher", "ebtReturn", "ebtCashBenefitPurchase", "return", "voidReason", "timeStamp", "processorStatusCode", "batchStatus", "guid", "allowCardEmv", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sale"]) -> typing.Union['VoidSearchVoidsResponseSearchResultDtoItemSale', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authOnly"]) -> typing.Union[MetaOapg.properties.authOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debitSale"]) -> typing.Union[MetaOapg.properties.debitSale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debitReturn"]) -> typing.Union[MetaOapg.properties.debitReturn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ebtFoodStampPurchase"]) -> typing.Union[MetaOapg.properties.ebtFoodStampPurchase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ebtElectronicVoucher"]) -> typing.Union[MetaOapg.properties.ebtElectronicVoucher, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ebtReturn"]) -> typing.Union[MetaOapg.properties.ebtReturn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ebtCashBenefitPurchase"]) -> typing.Union[MetaOapg.properties.ebtCashBenefitPurchase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["return"]) -> typing.Union[MetaOapg.properties._return, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voidReason"]) -> typing.Union[MetaOapg.properties.voidReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeStamp"]) -> typing.Union[MetaOapg.properties.timeStamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processorStatusCode"]) -> typing.Union[MetaOapg.properties.processorStatusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchStatus"]) -> typing.Union[MetaOapg.properties.batchStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowCardEmv"]) -> typing.Union[MetaOapg.properties.allowCardEmv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "sale", "authOnly", "debitSale", "debitReturn", "ebtFoodStampPurchase", "ebtElectronicVoucher", "ebtReturn", "ebtCashBenefitPurchase", "return", "voidReason", "timeStamp", "processorStatusCode", "batchStatus", "guid", "allowCardEmv", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        sale: typing.Union['VoidSearchVoidsResponseSearchResultDtoItemSale', schemas.Unset] = schemas.unset,
        authOnly: typing.Union[MetaOapg.properties.authOnly, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        debitSale: typing.Union[MetaOapg.properties.debitSale, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        debitReturn: typing.Union[MetaOapg.properties.debitReturn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ebtFoodStampPurchase: typing.Union[MetaOapg.properties.ebtFoodStampPurchase, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ebtElectronicVoucher: typing.Union[MetaOapg.properties.ebtElectronicVoucher, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ebtReturn: typing.Union[MetaOapg.properties.ebtReturn, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ebtCashBenefitPurchase: typing.Union[MetaOapg.properties.ebtCashBenefitPurchase, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        voidReason: typing.Union[MetaOapg.properties.voidReason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        timeStamp: typing.Union[MetaOapg.properties.timeStamp, str, schemas.Unset] = schemas.unset,
        processorStatusCode: typing.Union[MetaOapg.properties.processorStatusCode, str, schemas.Unset] = schemas.unset,
        batchStatus: typing.Union[MetaOapg.properties.batchStatus, str, schemas.Unset] = schemas.unset,
        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
        allowCardEmv: typing.Union[MetaOapg.properties.allowCardEmv, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoidSearchVoidsResponseSearchResultDtoItem':
        return super().__new__(
            cls,
            *args,
            status=status,
            sale=sale,
            authOnly=authOnly,
            debitSale=debitSale,
            debitReturn=debitReturn,
            ebtFoodStampPurchase=ebtFoodStampPurchase,
            ebtElectronicVoucher=ebtElectronicVoucher,
            ebtReturn=ebtReturn,
            ebtCashBenefitPurchase=ebtCashBenefitPurchase,
            voidReason=voidReason,
            timeStamp=timeStamp,
            processorStatusCode=processorStatusCode,
            batchStatus=batchStatus,
            guid=guid,
            allowCardEmv=allowCardEmv,
            _configuration=_configuration,
            **kwargs,
        )

from connex_pay_python_sdk.model.void_search_voids_response_search_result_dto_item_sale import VoidSearchVoidsResponseSearchResultDtoItemSale
