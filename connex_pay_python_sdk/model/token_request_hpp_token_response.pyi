# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class TokenRequestHppTokenResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            merchantName = schemas.StrSchema
            amount = schemas.IntSchema
            resultRedirectUrl = schemas.StrSchema
            tempToken = schemas.StrSchema
            expiration = schemas.StrSchema
            logoUrl = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "merchantName": merchantName,
                "amount": amount,
                "resultRedirectUrl": resultRedirectUrl,
                "tempToken": tempToken,
                "expiration": expiration,
                "logoUrl": logoUrl,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantName"]) -> MetaOapg.properties.merchantName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultRedirectUrl"]) -> MetaOapg.properties.resultRedirectUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempToken"]) -> MetaOapg.properties.tempToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration"]) -> MetaOapg.properties.expiration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "merchantName", "amount", "resultRedirectUrl", "tempToken", "expiration", "logoUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantName"]) -> typing.Union[MetaOapg.properties.merchantName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultRedirectUrl"]) -> typing.Union[MetaOapg.properties.resultRedirectUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempToken"]) -> typing.Union[MetaOapg.properties.tempToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration"]) -> typing.Union[MetaOapg.properties.expiration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUrl"]) -> typing.Union[MetaOapg.properties.logoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "merchantName", "amount", "resultRedirectUrl", "tempToken", "expiration", "logoUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        merchantName: typing.Union[MetaOapg.properties.merchantName, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        resultRedirectUrl: typing.Union[MetaOapg.properties.resultRedirectUrl, str, schemas.Unset] = schemas.unset,
        tempToken: typing.Union[MetaOapg.properties.tempToken, str, schemas.Unset] = schemas.unset,
        expiration: typing.Union[MetaOapg.properties.expiration, str, schemas.Unset] = schemas.unset,
        logoUrl: typing.Union[MetaOapg.properties.logoUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenRequestHppTokenResponse':
        return super().__new__(
            cls,
            *args,
            description=description,
            merchantName=merchantName,
            amount=amount,
            resultRedirectUrl=resultRedirectUrl,
            tempToken=tempToken,
            expiration=expiration,
            logoUrl=logoUrl,
            _configuration=_configuration,
            **kwargs,
        )
