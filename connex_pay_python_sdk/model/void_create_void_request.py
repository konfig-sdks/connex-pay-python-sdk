# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from connex_pay_python_sdk import schemas  # noqa: F401


class VoidCreateVoidRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "DeviceGuid",
        }
        
        class properties:
            DeviceGuid = schemas.StrSchema
            SaleGuid = schemas.StrSchema
            ReturnGuid = schemas.StrSchema
            SaleReferenceNumber = schemas.Int32Schema
            AuthOnlyGuid = schemas.StrSchema
            VoidReason = schemas.StrSchema
            Amount = schemas.Float32Schema
            SequenceNumber = schemas.StrSchema
            __annotations__ = {
                "DeviceGuid": DeviceGuid,
                "SaleGuid": SaleGuid,
                "ReturnGuid": ReturnGuid,
                "SaleReferenceNumber": SaleReferenceNumber,
                "AuthOnlyGuid": AuthOnlyGuid,
                "VoidReason": VoidReason,
                "Amount": Amount,
                "SequenceNumber": SequenceNumber,
            }
    
    DeviceGuid: MetaOapg.properties.DeviceGuid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SaleGuid"]) -> MetaOapg.properties.SaleGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReturnGuid"]) -> MetaOapg.properties.ReturnGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SaleReferenceNumber"]) -> MetaOapg.properties.SaleReferenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AuthOnlyGuid"]) -> MetaOapg.properties.AuthOnlyGuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VoidReason"]) -> MetaOapg.properties.VoidReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> MetaOapg.properties.Amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SequenceNumber"]) -> MetaOapg.properties.SequenceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "SaleGuid", "ReturnGuid", "SaleReferenceNumber", "AuthOnlyGuid", "VoidReason", "Amount", "SequenceNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceGuid"]) -> MetaOapg.properties.DeviceGuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SaleGuid"]) -> typing.Union[MetaOapg.properties.SaleGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReturnGuid"]) -> typing.Union[MetaOapg.properties.ReturnGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SaleReferenceNumber"]) -> typing.Union[MetaOapg.properties.SaleReferenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AuthOnlyGuid"]) -> typing.Union[MetaOapg.properties.AuthOnlyGuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VoidReason"]) -> typing.Union[MetaOapg.properties.VoidReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> typing.Union[MetaOapg.properties.Amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SequenceNumber"]) -> typing.Union[MetaOapg.properties.SequenceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DeviceGuid", "SaleGuid", "ReturnGuid", "SaleReferenceNumber", "AuthOnlyGuid", "VoidReason", "Amount", "SequenceNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        DeviceGuid: typing.Union[MetaOapg.properties.DeviceGuid, str, ],
        SaleGuid: typing.Union[MetaOapg.properties.SaleGuid, str, schemas.Unset] = schemas.unset,
        ReturnGuid: typing.Union[MetaOapg.properties.ReturnGuid, str, schemas.Unset] = schemas.unset,
        SaleReferenceNumber: typing.Union[MetaOapg.properties.SaleReferenceNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AuthOnlyGuid: typing.Union[MetaOapg.properties.AuthOnlyGuid, str, schemas.Unset] = schemas.unset,
        VoidReason: typing.Union[MetaOapg.properties.VoidReason, str, schemas.Unset] = schemas.unset,
        Amount: typing.Union[MetaOapg.properties.Amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        SequenceNumber: typing.Union[MetaOapg.properties.SequenceNumber, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VoidCreateVoidRequest':
        return super().__new__(
            cls,
            *args,
            DeviceGuid=DeviceGuid,
            SaleGuid=SaleGuid,
            ReturnGuid=ReturnGuid,
            SaleReferenceNumber=SaleReferenceNumber,
            AuthOnlyGuid=AuthOnlyGuid,
            VoidReason=VoidReason,
            Amount=Amount,
            SequenceNumber=SequenceNumber,
            _configuration=_configuration,
            **kwargs,
        )
