# coding: utf-8

"""
    ConnexPay Reporting API

    REST API for retrieving reporting data. Currently Daily Accounting data only.

    The version of the OpenAPI document: v1
    Created by: https://docs.connexpay.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from connex_pay_python_sdk.pydantic.authentication_obtain3_d_secure_authentication_request_card_customer import AuthenticationObtain3DSecureAuthenticationRequestCardCustomer
from connex_pay_python_sdk.pydantic.authentication_obtain3_d_secure_authentication_request_card_three_ds import AuthenticationObtain3DSecureAuthenticationRequestCardThreeDs

class AuthenticationObtain3DSecureAuthenticationRequestCard(BaseModel):
    # Mandatory if Guid field is not provided. Card number.  Must be 16 characters. (example: 4532538795426624) or token (example: FfL7exC7Xe2y6624)
    card_number: typing.Optional[str] = Field(None, alias='CardNumber')

    # Cardholder's name. Providing information in this field allows a user of the ConnexPay portal to search for a transaction using the cardholder name
    card_holder_name: typing.Optional[str] = Field(None, alias='CardHolderName')

    # The three or four digit CVV code at the back side of the credit and debit card. This value is required for all card-not-present processing environments
    cvv2: typing.Optional[str] = Field(None, alias='Cvv2')

    # Optional with Token. Card's expiry date in the YYMM format
    expiration_date: typing.Optional[date] = Field(None, alias='ExpirationDate')

    # Guid is the unique identifier for a card info generated by Connexpay upon previous Sale creation. Create Sale API will accept either card info or Guid, but not both
    guid: typing.Optional[str] = Field(None, alias='Guid')

    # Flagging a transaction as \"IsRecurring\": true allows a recurring sale to be submitted without a valid CVV code, which is only intended for scenarios where you might be storing card data to perform repeated payments on the same card, such as a monthly subscriptions. Typically IsRecurring can be defaulted to False.
    is_recurring: typing.Optional[bool] = Field(None, alias='IsRecurring')

    customer: typing.Optional[AuthenticationObtain3DSecureAuthenticationRequestCardCustomer] = Field(None, alias='Customer')

    three_d_s: typing.Optional[AuthenticationObtain3DSecureAuthenticationRequestCardThreeDs] = Field(None, alias='ThreeDS')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
